#!/usr/bin/env python3
import os
import random
import time
import sqlite3
import threading
import traceback
from typing import List, Tuple, Optional

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
TOKEN = os.getenv("STAR") or os.getenv("BOT_TOKEN") or ""
DB_PATH = os.getenv("DB_PATH", "stars.db")
SPIN_COST_STARS = int(os.getenv("SPIN_COST_STARS", "1"))
# –ü—Ä–æ–≤–∞–π–¥–µ—Ä –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–≤–µ–¥–µ–Ω–∏—è "–∫–∞–∫ —É –¥—Ä—É–≥–∞"
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "").strip()
SPIN_PRICE_AMOUNT = int(os.getenv("SPIN_PRICE_AMOUNT", "100"))  # –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥.)
CURRENCY = os.getenv("CURRENCY", "RUB")

# –û–¥–∏–Ω –∞–¥–º–∏–Ω —á–µ—Ä–µ–∑ ADMIN_ID
_admin_id_raw = os.getenv("ADMIN_ID", "").strip()
try:
    ADMIN_IDS: List[int] = [int(_admin_id_raw)] if _admin_id_raw else []
except ValueError:
    ADMIN_IDS = []

if not TOKEN:
    raise SystemExit("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è STAR –∏–ª–∏ BOT_TOKEN")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# ====== –°–æ—Å—Ç–æ—è–Ω–∏—è ======
spin_locks = set()                   # chat_id –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
pending_actions = {}                 # user_id -> action
# –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–æ–π—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
pending_spin_invoice = {}            # user_id -> {"chat_id": int, "msg_id": int}

# ====== DB (sqlite) ======
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS balances (
        user_id INTEGER PRIMARY KEY,
        stars INTEGER NOT NULL
    );
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS star_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        change INTEGER NOT NULL,
        reason TEXT,
        ts INTEGER NOT NULL,
        ext_charge_id TEXT
    );
    """)
    conn.commit()
    conn.close()

def get_balance(user_id: int) -> int:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT stars FROM balances WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    return int(row[0]) if row else 0

def set_balance(user_id: int, stars: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO balances(user_id, stars) VALUES(?, ?) "
        "ON CONFLICT(user_id) DO UPDATE SET stars=excluded.stars;",
        (user_id, int(stars))
    )
    conn.commit()
    conn.close()

def change_balance(user_id: int, delta: int, reason: str = "", ext_charge_id: Optional[str] = None) -> int:
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT stars FROM balances WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    prev = int(row[0]) if row else 0
    new = prev + int(delta)
    if new < 0:
        conn.close()
        raise ValueError("Insufficient balance")
    cur.execute(
        "INSERT INTO balances(user_id, stars) VALUES(?, ?) "
        "ON CONFLICT(user_id) DO UPDATE SET stars=excluded.stars;",
        (user_id, new)
    )
    cur.execute(
        "INSERT INTO star_logs(user_id, change, reason, ts, ext_charge_id) VALUES(?, ?, ?, ?, ?);",
        (user_id, int(delta), reason, int(time.time()), ext_charge_id)
    )
    conn.commit()
    conn.close()
    return new

# ====== –†—É–ª–µ—Ç–∫–∞ ======
SYMBOLS: List[Tuple[str, int]] = [
    ("üçí", 25),
    ("üçã", 25),
    ("üçâ", 20),
    ("‚≠ê", 15),
    ("7Ô∏è‚É£", 5),
]

def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", 5
        if s == "‚≠ê":
            return "star", 3
        return "fruit", 2
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–ü–æ–±–µ–¥–∞!</b> {' '.join(mid)}\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è"
        )

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton(f"üéüÔ∏è –°–ü–ò–ù ({SPIN_COST_STARS} ‚≠êÔ∏è)", callback_data="spin"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    if ADMIN_IDS:
        kb.add(InlineKeyboardButton("üîß –ê–¥–º–∏–Ω", callback_data="admin"))
    return kb

def roulette_kb():
    kb = InlineKeyboardMarkup()
    # –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ PROVIDER_TOKEN –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π "–∏–Ω–≤–æ–π—Å"
    kb.add(InlineKeyboardButton(f"üéüÔ∏è –°–ü–ò–ù ({SPIN_COST_STARS} ‚≠êÔ∏è)", callback_data="spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def profile_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def admin_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ûï –í—ã–¥–∞—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="admin_give"))
    kb.add(InlineKeyboardButton("üìã –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)", callback_data="admin_logs"))
    kb.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@bot.message_handler(commands=['start'])
def handle_start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b>.\n\n"
        f"–ù–∞–∂–º–∏ <b>–ò–ì–†–ê–¢–¨</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä—É–ª–µ—Ç–∫—É –∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å {SPIN_COST_STARS} ‚≠êÔ∏è –Ω–∞ —Å–ø–∏–Ω."
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb())

@bot.callback_query_handler(func=lambda c: c.data == "play")
def cb_play(call):
    bot.edit_message_text(
        "üé∞ <b>–†–∞–∑–¥–µ–ª —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
        "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É: —Å–æ–±–µ—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ.\n\n"
        "üí° –ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–∞ ‚Üí √ó2\n"
        "‚Ä¢ 3 –∑–≤–µ–∑–¥—ã ‚≠ê ‚Üí √ó3\n"
        "‚Ä¢ 3 —Å–µ–º—ë—Ä–∫–∏ 7Ô∏è‚É£ ‚Üí –¥–∂–µ–∫–ø–æ—Ç √ó5",
        call.message.chat.id, call.message.message_id, reply_markup=roulette_kb(), parse_mode="HTML"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "profile")
def cb_profile(call):
    uid = call.from_user.id
    bal = get_balance(uid)
    bot.edit_message_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî <b>{uid}</b>\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {bal} ‚≠êÔ∏è",
        call.message.chat.id, call.message.message_id, reply_markup=profile_kb(), parse_mode="HTML"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "back_to_main")
def cb_back(call):
    handle_start(call.message)
    bot.answer_callback_query(call.id)

# ====== –ê–¥–º–∏–Ω–∫–∞ ======
@bot.callback_query_handler(func=lambda c: c.data == "admin")
def cb_admin(call):
    if call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    bot.edit_message_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", call.message.chat.id, call.message.message_id, reply_markup=admin_kb())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "admin_give")
def cb_admin_give(call):
    if call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç–µ: <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–≤—ë–∑–¥>\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789 5")
    pending_actions[call.from_user.id] = "await_admin_give"
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "admin_logs")
def cb_admin_logs(call):
    if call.from_user.id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, change, reason, ts, ext_charge_id FROM star_logs ORDER BY id DESC LIMIT 10")
    rows = cur.fetchall()
    conn.close()
    lines = []
    for r in rows:
        ts = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(r[4]))
        lines.append(f"{r[0]} | user:{r[1]} | change:{r[2]} | {r[3]} | {ts} | charge:{r[5] or '-'}")
    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n" + ("\n".join(lines) if lines else "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π")
    bot.send_message(call.message.chat.id, text)
    bot.answer_callback_query(call.id)

# ====== SPIN: –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∏ –±–µ–∑ ======
@bot.callback_query_handler(func=lambda c: c.data == "spin")
def cb_spin(call):
    uid = call.from_user.id
    chat_id = call.message.chat.id

    if chat_id in spin_locks:
        bot.answer_callback_query(call.id, "–°–ø–∏–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=False)
        return

    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–æ–π—Å
    if PROVIDER_TOKEN:
        prices = [LabeledPrice(label="‚òÖ1", amount=SPIN_PRICE_AMOUNT)]
        payload = f"spin:{uid}"
        try:
            invoice_msg = bot.send_invoice(
                chat_id=chat_id,
                title="–ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–∞",
                description="–û–ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–∏–Ω —Å–ø–∏–Ω",
                invoice_payload=payload,
                provider_token=PROVIDER_TOKEN,
                currency=CURRENCY,
                prices=prices
            )
        except TypeError:
            invoice_msg = bot.send_invoice(
                chat_id=chat_id,
                title="–ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–∞",
                description="–û–ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–∏–Ω —Å–ø–∏–Ω",
                payload=payload,
                provider_token=PROVIDER_TOKEN,
                currency=CURRENCY,
                prices=prices
            )
        try:
            if invoice_msg is not None:
                pending_spin_invoice[uid] = {"chat_id": invoice_msg.chat.id, "msg_id": invoice_msg.message_id}
            else:
                pending_spin_invoice[uid] = {"chat_id": chat_id, "msg_id": call.message.message_id}
        except Exception:
            pending_spin_invoice[uid] = {"chat_id": chat_id, "msg_id": call.message.message_id}

        bot.answer_callback_query(call.id)
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π "–∏–Ω–≤–æ–π—Å" –∏ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {SPIN_COST_STARS} ‚≠êÔ∏è", callback_data=f"fake_pay_spin:{uid}"))
    kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="fake_pay_cancel"))
    try:
        bot.edit_message_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ —Å–ø–∏–Ω–∞\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {SPIN_COST_STARS} ‚≠êÔ∏è\n–ù–∞–∂–º–∏—Ç–µ –û–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ {SPIN_COST_STARS} ‚≠êÔ∏è —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.",
            chat_id, call.message.message_id, reply_markup=kb
        )
    except Exception:
        bot.send_message(chat_id,
            f"üí≥ –û–ø–ª–∞—Ç–∞ —Å–ø–∏–Ω–∞\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {SPIN_COST_STARS} ‚≠êÔ∏è\n–ù–∞–∂–º–∏—Ç–µ –û–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ {SPIN_COST_STARS} ‚≠êÔ∏è —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.",
            reply_markup=kb
        )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("fake_pay_spin:"))
def cb_fake_pay_spin_confirm(call):
    # callback_data = fake_pay_spin:<uid_in_payload>
    parts = call.data.split(":", 1)
    try:
        target_uid = int(parts[1])
    except Exception:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        return

    user_id = call.from_user.id
    if user_id != target_uid:
        bot.answer_callback_query(call.id, "–ü–ª–∞—Ç—ë–∂ –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
        return

    bal = get_balance(user_id)
    if bal < SPIN_COST_STARS:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", show_alert=True)
        # –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É –º–æ–∂–Ω–æ —Ç—É—Ç
        return

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π charge id –≤–∏–¥–∞ fake-<timestamp>-<uid> –¥–ª—è –ª–æ–≥–æ–≤
    ext_charge_id = f"fake-{int(time.time())}-{user_id}"

    try:
        new_bal = change_balance(user_id, -SPIN_COST_STARS, reason="fake_pay_spin", ext_charge_id=ext_charge_id)
    except Exception:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω–∏–º –º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ø–∏–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    try:
        pending_spin_invoice[user_id] = {"chat_id": call.message.chat.id, "msg_id": call.message.message_id}
    except Exception:
        pending_spin_invoice[user_id] = {"chat_id": call.message.chat.id, "msg_id": call.message.message_id}

    bot.answer_callback_query(call.id, f"–û–ø–ª–∞—Ç–∞ {SPIN_COST_STARS} ‚≠êÔ∏è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é —Å–ø–∏–Ω.")
    # –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞-—á–µ–∫ –≤ —á–∞—Ç–µ
    bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. ChargeID: {ext_charge_id}. –°–ø–∏—Å–∞–Ω–æ {SPIN_COST_STARS} ‚≠êÔ∏è.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–ø–∏–Ω–∞
    thread = threading.Thread(target=_run_spin_animation_after_payment, args=(call.message.chat.id, call.message.message_id, user_id))
    thread.start()

@bot.callback_query_handler(func=lambda c: c.data == "fake_pay_cancel")
def cb_fake_pay_cancel(call):
    try:
        # –≤–µ—Ä–Ω—É—Ç—å –≤ –º–µ–Ω—é —Ä—É–ª–µ—Ç–∫–∏
        bot.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb())
    except Exception:
        pass
    bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")

# ====== PreCheckout –∏ successful_payment –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ======
@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_q):
    try:
        bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    except Exception:
        pass

@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    sp = message.successful_payment
    payload = getattr(sp, "invoice_payload", None) or getattr(sp, "payload", None) or ""
    user_id = message.from_user.id
    # –ª–æ–≥–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π charge id –∏ –∑–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—É
    ext_id = getattr(sp, "telegram_payment_charge_id", None)
    # –µ—Å–ª–∏ payload spin: ‚Äî –∑–∞–ø—É—Å–∫ —Å–ø–∏–Ω–∞
    # –∑–∞—á–∏—Å–ª—è–µ–º 1 –∑–≤–µ–∑–¥—É –Ω–∞ –±–∞–ª–∞–Ω—Å (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã)
    try:
        change_balance(user_id, 1, reason="real_payment_credit_star", ext_charge_id=ext_id)
    except Exception:
        pass

    if payload.startswith("spin:"):
        pending = pending_spin_invoice.pop(user_id, None)
        if pending:
            chat_id = pending["chat_id"]; msg_id = pending["msg_id"]
        else:
            sent = bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é —Å–ø–∏–Ω...")
            chat_id = sent.chat.id; msg_id = sent.message_id
        threading.Thread(target=_run_spin_animation_after_payment, args=(chat_id, msg_id, user_id)).start()
    else:
        bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ 1 ‚òÖ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å.")

# ====== –ó–∞–ø—É—Å–∫ —Å–ø–∏–Ω–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ ======
def _run_spin_animation_after_payment(chat_id: int, msg_id: int, user_id: int):
    try:
        spin_locks.add(chat_id)
        frames = [spin_once() for _ in range(4)]
        for frame in frames[:-1]:
            try:
                bot.edit_message_text(matrix_to_text(frame) + "\n\nüé∞ –ö—Ä—É—Ç–∏—Ç—Å—è...", chat_id, msg_id)
            except Exception:
                pass
            time.sleep(0.6)

        final = spin_once()
        result, mult = eval_middle_row(final)
        win = mult if result != "lose" else 0
        if win:
            try:
                change_balance(user_id, win, reason="spin_win")
            except Exception:
                pass

        new_bal = get_balance(user_id)
        text = make_result_text(final, result, mult, new_bal)
        try:
            bot.edit_message_text(text, chat_id, msg_id, reply_markup=result_kb(), parse_mode="HTML")
        except Exception:
            bot.send_message(chat_id, text, reply_markup=result_kb(), parse_mode="HTML")
    except Exception:
        try:
            bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ø–∏–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", chat_id, msg_id)
        except Exception:
            pass
        traceback.print_exc()
    finally:
        spin_locks.discard(chat_id)

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–¥–º–∏–Ω/–±–∞–ª–∞–Ω—Å) ======
@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    uid = message.from_user.id
    txt = (message.text or "").strip()

    if pending_actions.get(uid) == "await_admin_give":
        parts = txt.split()
        if len(parts) != 2:
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å: <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–≤—ë–∑–¥>")
            return
        try:
            target = int(parts[0])
            amount = int(parts[1])
        except ValueError:
            bot.reply_to(message, "ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            pending_actions.pop(uid, None)
            return
        try:
            new_bal = change_balance(target, amount, reason=f"admin_give_by_{uid}")
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ: {e}")
            pending_actions.pop(uid, None)
            return
        bot.reply_to(message, f"–í—ã–¥–∞–Ω–æ {amount} ‚≠êÔ∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bal} ‚≠êÔ∏è")
        try:
            bot.send_message(target, f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠êÔ∏è. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bal} ‚≠êÔ∏è")
        except Exception:
            pass
        pending_actions.pop(uid, None)
        return

    if txt.startswith("/balance"):
        bal = get_balance(uid)
        bot.reply_to(message, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} ‚≠êÔ∏è")
        return

    if txt.startswith("/give") and uid in ADMIN_IDS:
        parts = txt.split()
        if len(parts) != 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give <user_id> <amount>")
            return
        try:
            target = int(parts[1])
            amount = int(parts[2])
        except ValueError:
            bot.reply_to(message, "ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return
        try:
            new_bal = change_balance(target, amount, reason=f"admin_give_by_{uid}")
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ: {e}")
            return
        bot.reply_to(message, f"–í—ã–¥–∞–Ω–æ {amount} ‚≠êÔ∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bal} ‚≠êÔ∏è")
        try:
            bot.send_message(target, f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠êÔ∏è. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bal} ‚≠êÔ∏è")
        except Exception:
            pass
        return

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    init_db()
    try:
        print("Bot started")
        bot.infinity_polling()
    except KeyboardInterrupt:
        print("Stopped by user")
    except Exception as e:
        print("Polling stopped:", e)
        traceback.print_exc()
