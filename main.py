import os
import random
from collections import deque
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# ===================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====================
TOKEN = os.getenv("Song")  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 6525179440  # –¢–≤–æ–π ID
MAX_HISTORY = 10  # –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ö—Ä–∞–Ω–∏—Ç—å

# ===================== –¶–ò–¢–ê–¢–´ =====================
quotes = [
    "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã.",
    "–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –ø—É—Ç—å, –∞ –Ω–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
    "–£—á–∏—Ç—å—Å—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ, –∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è ‚Äî –≤—Å–µ–≥–¥–∞ —Ä–∞–Ω–æ.",
    "–°–º–µ—Ö ‚Äî –ª—É—á—à–µ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å.",
    "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.",
    "–í–µ—Ä—å –≤ —Å–µ–±—è, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π –Ω–µ –≤–µ—Ä–∏—Ç.",
    "–û—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ —à–∞–≥–∏ –∫ —É—Å–ø–µ—Ö—É.",
    "–¢–µ—Ä–ø–µ–Ω–∏–µ –∏ —Ç—Ä—É–¥ –≤—Å—ë –ø–µ—Ä–µ—Ç—Ä—É—Ç.",
    "–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ ‚Äî —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ."
]

used_quotes = set()
user_history = deque(maxlen=MAX_HISTORY)  # –•—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("üòÇ –Æ–º–æ—Ä", callback_data="humor")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def quote_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def admin_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuotesAura ‚Äî —Ç–≤–æ–π –±–æ—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏ —é–º–æ—Ä–æ–º!\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "- –í—ã–±–µ—Ä–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–ª–∏ —é–º–æ—Ä\n\n"
        "üéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è!"
    )

# ===================== –í–´–î–ê–ß–ê –¶–ò–¢–ê–¢ =====================
def get_random_quote() -> str:
    global used_quotes
    available = list(set(quotes) - used_quotes)
    if not available:  # –µ—Å–ª–∏ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –æ—á–∏—â–∞–µ–º
        used_quotes.clear()
        available = list(quotes)
    quote = random.choice(available)
    used_quotes.add(quote)
    return quote

# ===================== –ö–û–ú–ê–ù–î–´ =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    user_history.appendleft(f"@{update.effective_user.username or update.effective_user.first_name}")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é, –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ
    if update.effective_user.id == ADMIN_ID:
        keyboard_buttons = list(main_menu().inline_keyboard)
        keyboard_buttons.append([InlineKeyboardButton("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin")])
        reply_markup = InlineKeyboardMarkup(keyboard_buttons)
    else:
        reply_markup = main_menu()
    
    await update.message.reply_text(full_greeting(user_name), reply_markup=reply_markup)

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_name = query.from_user.first_name or "–¥—Ä—É–≥"
    
    # –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history.appendleft(f"@{query.from_user.username or query.from_user.first_name}")

    if query.data == "random_quote":
        quote = get_random_quote()
        await query.edit_message_text(
            text=f"üí¨ {quote}",
            reply_markup=quote_menu()
        )

    elif query.data == "humor":
        joke = "üòÇ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç–ª–∞—è ‚Äî –¥–ª—è —Å–ª–∞–±–∞–∫–æ–≤!"
        await query.edit_message_text(
            text=joke,
            reply_markup=back_menu()
        )

    elif query.data == "about":
        text = (
            "‚ÑπÔ∏è *–û QuotesAuraBot*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ —é–º–æ—Ä.\n"
            "üí° –¶–∏—Ç–∞—Ç—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ.\n"
            "üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
        )
        await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "admin" and query.from_user.id == ADMIN_ID:
        await query.edit_message_text(
            text="üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞",
            reply_markup=admin_menu()
        )

    elif query.data == "stats" and query.from_user.id == ADMIN_ID:
        stats_text = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(list(user_history)[:MAX_HISTORY])
        await query.edit_message_text(text=stats_text, reply_markup=admin_menu())

    elif query.data == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ —Ç—ã
        if query.from_user.id == ADMIN_ID:
            keyboard_buttons = list(main_menu().inline_keyboard)
            keyboard_buttons.append([InlineKeyboardButton("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin")])
            reply_markup = InlineKeyboardMarkup(keyboard_buttons)
        else:
            reply_markup = main_menu()
        await query.edit_message_text(full_greeting(user_name), reply_markup=reply_markup)

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("QuotesAuraBot –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
