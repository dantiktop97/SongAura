import os
import asyncio
import json
from datetime import datetime
from aiohttp import web, ClientSession, ClientTimeout

BOT_TOKEN = os.getenv("AVTO")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNEL_USERNAME = "vzref2"     # –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
ADMIN_CHANNEL_ID = -1003079638308  # –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª

API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
POLL_INTERVAL = 1.0
LONG_POLL_TIMEOUT = 30
CLIENT_TIMEOUT = ClientTimeout(total=LONG_POLL_TIMEOUT + 20)

session: ClientSession | None = None

# –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
MAIN_TEXT = "–£–ü–û–ú\n\nüìå –ö–∞–∫ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç:\n1Ô∏è‚É£ –ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç–µ.\n2Ô∏è‚É£ –ß—Ç–æ–±—ã —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö, –±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–∏–º—ã–º —Å–ª–æ–≤–æ–º '–£–ü–û–ú'.\n3Ô∏è‚É£ –í—Å–µ, –∫—Ç–æ –ø–∏—Å–∞–ª –≤ —á–∞—Ç–µ, –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /everyone –∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

# –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
DETAILED_TEXT = """
üìå –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª.  
2Ô∏è‚É£ –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.  
3Ô∏è‚É£ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ —É–ø–æ–º–∏–Ω–∞—Ç—å.  
4Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /everyone –∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ—Ö.  
5Ô∏è‚É£ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–¥–Ω–æ –≤–∏–¥–∏–º–æ–µ —Å–ª–æ–≤–æ "–£–ü–û–ú", –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–∫—Ä—ã—Ç—ã ID –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.  
6Ô∏è‚É£ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç–µ, –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
"""

async def send_method(method: str, payload: dict):
    url = f"{API_URL}/{method}"
    try:
        async with session.post(url, json=payload, timeout=CLIENT_TIMEOUT) as resp:
            text = await resp.text()
            try:
                data = json.loads(text)
            except Exception:
                data = {"ok": False, "raw": text}
            return data
    except Exception as e:
        print(f"{method} exception: {repr(e)}")
        return {"ok": False, "error": str(e)}

async def handle_update(update: dict):
    if "message" in update:
        msg = update["message"]
        chat_id = msg["chat"]["id"]
        text = msg.get("text", "")
        user = msg.get("from", {})
        user_id = user.get("id")
        username = f"@{user.get('username')}" if user.get("username") else user.get("first_name","").strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        async with session.get(
            f"{API_URL}/getChatMember",
            params={"chat_id": f"@{CHANNEL_USERNAME}", "user_id": user_id},
            timeout=CLIENT_TIMEOUT
        ) as resp:
            resp_text = await resp.text()
            try:
                info = json.loads(resp_text)
            except Exception:
                info = {"ok": False, "raw": resp_text}

        status = info.get("result", {}).get("status", "")

        if text and text.strip().startswith("/start"):
            if status in ["member", "creator", "administrator"]:
                # –ü–æ–¥–ø–∏—Å–∞–Ω ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ–º
                print(f"{username} —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, /start –Ω–µ –∑–∞—Å–æ—Ä—è–µ—Ç —á–∞—Ç")
            else:
                # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Üí –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                keyboard = {"inline_keyboard": [[{"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_sub"}]]}
                await send_method("sendMessage", {
                    "chat_id": chat_id,
                    "text": "üëã –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É:",
                    "reply_markup": keyboard
                })

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∞–¥–º–∏–Ω-–∫–∞–Ω–∞–ª
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
            report = f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nüßë Username: {username}\nüÜî ID: {user_id}\nüïí –í—Ä–µ–º—è: {timestamp}"
            await send_method("sendMessage", {"chat_id": ADMIN_CHANNEL_ID, "text": report})

        elif text.strip():  # –õ—é–±–æ–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if status in ["member", "creator", "administrator"]:
                # –ü–æ–¥–ø–∏—Å–∞–Ω ‚Üí –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                keyboard_main = {"inline_keyboard": [[{"text": "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "callback_data": "show_instruction"}]]}
                await send_method("sendMessage", {"chat_id": chat_id, "text": MAIN_TEXT, "reply_markup": keyboard_main})
            else:
                # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Üí –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                await send_method("sendMessage", {"chat_id": chat_id, "text": "‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –µ—â—ë —Ä–∞–∑."})

    if "callback_query" in update:
        cb = update["callback_query"]
        data = cb.get("data", "")
        chat_id = cb.get("message", {}).get("chat", {}).get("id")
        message_id = cb.get("message", {}).get("message_id")

        if data == "check_sub":
            user_id = cb.get("from", {}).get("id")
            async with session.get(
                f"{API_URL}/getChatMember",
                params={"chat_id": f"@{CHANNEL_USERNAME}", "user_id": user_id},
                timeout=CLIENT_TIMEOUT
            ) as resp:
                resp_text = await resp.text()
                try:
                    info = json.loads(resp_text)
                except Exception:
                    info = {"ok": False, "raw": resp_text}

            status = info.get("result", {}).get("status", "")
            if status in ["member", "creator", "administrator"]:
                keyboard_main = {"inline_keyboard": [[{"text": "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "callback_data": "show_instruction"}]]}
                await send_method("sendMessage", {"chat_id": chat_id, "text": MAIN_TEXT, "reply_markup": keyboard_main})
            else:
                await send_method("sendMessage", {"chat_id": chat_id, "text": "‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –µ—â—ë —Ä–∞–∑."})

            await send_method("answerCallbackQuery", {"callback_query_id": cb.get("id", "")})

        elif data == "show_instruction":
            await send_method("deleteMessage", {"chat_id": chat_id, "message_id": message_id})
            keyboard_instruction = {"inline_keyboard": [[{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]]}
            await send_method("sendMessage", {"chat_id": chat_id, "text": DETAILED_TEXT, "reply_markup": keyboard_instruction})
            await send_method("answerCallbackQuery", {"callback_query_id": cb.get("id", "")})

        elif data == "back_to_main":
            await send_method("deleteMessage", {"chat_id": chat_id, "message_id": message_id})
            keyboard_main = {"inline_keyboard": [[{"text": "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "callback_data": "show_instruction"}]]}
            await send_method("sendMessage", {"chat_id": chat_id, "text": MAIN_TEXT, "reply_markup": keyboard_main})
            await send_method("answerCallbackQuery", {"callback_query_id": cb.get("id", "")})

async def poll_loop():
    offset = 0
    while True:
        try:
            params = {"timeout": LONG_POLL_TIMEOUT, "offset": offset, "limit": 50}
            async with session.get(f"{API_URL}/getUpdates", params=params, timeout=CLIENT_TIMEOUT) as resp:
                text = await resp.text()
                try:
                    data = json.loads(text)
                except Exception:
                    data = {"ok": False, "raw": text}
            if not data.get("ok"):
                print("getUpdates returned error:", data)
            for upd in data.get("result", []):
                offset = max(offset, upd.get("update_id", 0) + 1)
                await handle_update(upd)
        except Exception as e:
            print("poll_loop exception:", repr(e))
            await asyncio.sleep(1)
        await asyncio.sleep(POLL_INTERVAL)

async def healthcheck(request):
    return web.Response(text="ok")

async def run():
    global session
    session = ClientSession(timeout=CLIENT_TIMEOUT)
    app = web.Application()
    app.router.add_get("/", healthcheck)
    port = int(os.getenv("PORT", "8000"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    loop = asyncio.get_running_loop()
    poll_task = loop.create_task(poll_loop())

    stop = asyncio.Event()
    try:
        await stop.wait()
    finally:
        poll_task.cancel()
        await session.close()
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(run())
