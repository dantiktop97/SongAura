import os
import asyncio
from yt_dlp import YoutubeDL
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# ===================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====================
TOKEN = os.getenv("Song")  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
YDL_OPTS = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'outtmpl': 'song.%(ext)s',
    'quiet': True,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192'
    }],
}

# ===================== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SongAura ‚Äî —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n"
        "üöÄ –Ø –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–∂—É –ø–µ—Å–Ω–∏ –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ –ø—Ä–∏—Å—ã–ª–∞—é –∏—Ö –ø—Ä—è–º–æ —Å—é–¥–∞.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "- /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "- /search <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏> ‚Äî –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é\n\n"
        "üéµ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π!"
    )

# ===================== –ó–∞–≥—Ä—É–∑–∫–∞ —Å VK =====================
def download_vk_audio(query: str):
    """–ò—â–µ–º –ø–µ—Å–Ω—é –≤ VK —á–µ—Ä–µ–∑ yt-dlp –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ"""
    search_url = f"vksearch:{query}"  # yt-dlp –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç VK search
    with YoutubeDL(YDL_OPTS) as ydl:
        info = ydl.extract_info(search_url, download=True)
        entry = info['entries'][0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        filename = ydl.prepare_filename(entry).replace(".webm", ".mp3").replace(".m4a", ".mp3")
        return entry, filename

# ===================== –ö–æ–º–∞–Ω–¥—ã =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(full_greeting(user_name))

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /search <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏> üéµ")
        return

    query_text = " ".join(context.args)
    msg = await update.message.reply_text(f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query_text}...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Å–Ω—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        entry, file_name = await asyncio.to_thread(download_vk_audio, query_text)
        await update.message.reply_audio(
            open(file_name, "rb"),
            title=entry.get('title', query_text),
            caption="üé∂ SongAura"
        )
        os.remove(file_name)
        await msg.delete()
    except Exception as e:
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("search", search_command))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"  # –í–∞—à URL –Ω–∞ Render
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
