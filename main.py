import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

TOKEN = os.getenv("Song")  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
ADMIN_ID = 6525179440      # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–≤–æ–π)

# ===================== –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ =====================
QUOTES_FILE = "quotes.json"
JOKES_FILE = "jokes.json"
USERS_FILE = "users.json"

# ===================== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====================
def load_json(filename, default):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return default

quotes = load_json(QUOTES_FILE, ["–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã."])
jokes = load_json(JOKES_FILE, ["üòÇ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç–ª–∞—è ‚Äî –¥–ª—è —Å–ª–∞–±–∞–∫–æ–≤!"])
unique_users = load_json(USERS_FILE, [])

used_quotes = set()
used_jokes = set()

# ===================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("üòÇ –Æ–º–æ—Ä", callback_data="humor")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    if ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin")])
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def quote_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def joke_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üòÇ –ï—â—ë –æ–¥–∏–Ω —é–º–æ—Ä", callback_data="humor")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

# ===================== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuotesAura ‚Äî —Ç–≤–æ–π –±–æ—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏ —é–º–æ—Ä–æ–º!\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "- –í—ã–±–µ—Ä–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–ª–∏ —é–º–æ—Ä\n\n"
        "üéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è!"
    )

# ===================== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ =====================
def add_user(user):
    if user.username and user.username not in unique_users:
        unique_users.append(user.username)
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(unique_users, f, ensure_ascii=False)

# ===================== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã/—à—É—Ç–∫–∏ =====================
def get_random_quote():
    global used_quotes
    available = list(set(quotes) - used_quotes)
    if not available:
        used_quotes.clear()
        available = quotes.copy()
    quote = random.choice(available)
    used_quotes.add(quote)
    return quote

def get_random_joke():
    global used_jokes
    available = list(set(jokes) - used_jokes)
    if not available:
        used_jokes.clear()
        available = jokes.copy()
    joke = random.choice(available)
    used_jokes.add(joke)
    return joke

# ===================== –ö–æ–º–∞–Ω–¥—ã =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user)
    user_name = user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(full_greeting(user_name), reply_markup=main_menu())

# ===================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    add_user(user)
    user_name = user.first_name or "–¥—Ä—É–≥"

    if query.data == "random_quote":
        quote = get_random_quote()
        await query.edit_message_text(text=f"üí¨ {quote}", reply_markup=quote_menu())

    elif query.data == "humor":
        joke = get_random_joke()
        await query.edit_message_text(text=joke, reply_markup=joke_menu())

    elif query.data == "about":
        text = (
            "‚ÑπÔ∏è *–û QuotesAuraBot*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ —é–º–æ—Ä.\n"
            "üí° –¶–∏—Ç–∞—Ç—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ.\n"
            "üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
        )
        await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "admin":
        if user.id != ADMIN_ID:
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", reply_markup=back_menu())
            return
        # –ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        last_users = unique_users[-10:] if unique_users else ["–ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∑–∞—Ö–æ–¥–∏–ª"]
        text = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(f"@{u}" for u in last_users)
        await query.edit_message_text(text=text, reply_markup=back_menu())

    elif query.data == "back":
        await query.edit_message_text(full_greeting(user_name), reply_markup=main_menu())

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("QuotesAuraBot –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
