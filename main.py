import os
import random
import time
import json
import threading
from flask import Flask, request, abort
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = os.getenv("STAR")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "")
CURRENCY = os.getenv("CURRENCY", "XTR")
PORT = int(os.getenv("PORT", "10000"))
RENDER_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
BALANCE_FILE = "balances.json"

if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è STAR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)
balances_lock = threading.Lock()

# ====== –°–∏–º–≤–æ–ª—ã –∏ —à–∞–Ω—Å—ã ======
SYMBOLS = [("üçí", 25), ("üçã", 25), ("üçâ", 20), ("‚≠ê", 15), ("7Ô∏è‚É£", 5)]
MULTIPLIERS = {"fruit": 2, "star": 3, "jackpot": 5}

# ====== –ë–∞–ª–∞–Ω—Å ======
def load_balances():
    try:
        with balances_lock:
            if not os.path.exists(BALANCE_FILE):
                return {}
            with open(BALANCE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception:
        return {}

def save_balances(balances):
    try:
        with balances_lock:
            with open(BALANCE_FILE, "w", encoding="utf-8") as f:
                json.dump(balances, f, ensure_ascii=False)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", e)

balances = load_balances()

def get_balance(user_id):
    with balances_lock:
        return int(balances.get(str(user_id), 100))

def set_balance(user_id, value):
    with balances_lock:
        balances[str(user_id)] = int(value)
        save_balances(balances)

# ====== –†—É–ª–µ—Ç–∫–∞ ======
def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", MULTIPLIERS["jackpot"]
        if s == "‚≠ê":
            return "star", MULTIPLIERS["star"]
        return "fruit", MULTIPLIERS["fruit"]
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–ü–æ–±–µ–¥–∞!</b> {' '.join(mid)}\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è"
        )

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    return kb

def play_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ö–†–£–¢–ò–¢–¨ –ó–ê 15 ‚≠êÔ∏è", callback_data="spin_15"))
    kb.add(InlineKeyboardButton("–ö–†–£–¢–ò–¢–¨ –ó–ê 25 ‚≠êÔ∏è", callback_data="spin_25"))
    kb.add(InlineKeyboardButton("–ö–†–£–¢–ò–¢–¨ –ó–ê 50 ‚≠êÔ∏è", callback_data="spin_50"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def profile_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="play"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ====== –¢–µ–∫—Å—Ç—ã ======
def welcome_text(name):
    return (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚Äî –∑–¥–µ—Å—å –≤—ã–∏–≥—Ä—ã—à–∏ –Ω–µ –∂–¥—É—Ç, –æ–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è! ‚ú®\n\n"
        f"üéÅ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã</b> ‚Äî –ø—Ä—è–º–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç\n"
        f"üé∞ <b>–†–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∏–≥—Ä—ã</b> ‚Äî –∫–∞–∂–¥—ã–π —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π\n"
        f"üì≤ <b>–£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚Äî –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram\n\n"
        f"–ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞—á—É! üåü"
    )

def play_text():
    return (
        "üé∞ <b>–†–∞–∑–¥–µ–ª –ò–ì–†–ê–¢–¨</b>\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:\n"
        "‚Ä¢ –ó–∞ 15 ‚≠êÔ∏è –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å –¥–æ 100 ‚≠êÔ∏è\n"
        "‚Ä¢ –ó–∞ 25 ‚≠êÔ∏è ‚Äî –¥–æ 150 ‚≠êÔ∏è\n"
        "‚Ä¢ –ó–∞ 50 ‚≠êÔ∏è ‚Äî –¥–æ 250 ‚≠êÔ∏è\n\n"
        "–ß–µ–º –≤—ã—à–µ —Å—Ç–∞–≤–∫–∞ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à!"
    )

def profile_text(uid, bal):
    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî <b>ID:</b> {uid}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {bal} ‚≠êÔ∏è\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å.\n"
        f"–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! ‚ú®üé∞"
    )

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@bot.message_handler(commands=["start"])
def start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    bot.send_message(message.chat.id, welcome_text(name), reply_markup=main_menu_kb(), parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "play")
def play(call):
    bot.edit_message_text(play_text(), call.message.chat.id, call.message.message_id, reply_markup=play_kb(), parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile(call):
    uid = call.from_user.id
    bal = get_balance(uid)
    bot.edit_message_text(profile_text(uid, bal), call.message.chat.id, call.message.message_id, reply_markup=profile_kb(), parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back(call):
    name = call.from_user.first_name or "–∏–≥—Ä–æ–∫"
    bot.edit_message_text(welcome_text(name), call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb(), parse_mode="HTML")

# ====== –û–ø–ª–∞—Ç–∞ ======
@bot.callback_query_handler(func=lambda call: call.data in {"spin_15", "spin_25", "spin_50"})
def spin_pay(call):
    stake_map = {"spin_15": 15, "spin_25": 25, "spin_50": 50}
    stake = stake_map[call.data]
    payload = f"spin:{call.from_user.id}:{stake}:{int(time.time()*1000)}"
    prices = [LabeledPrice(label=f"–°–ø–∏–Ω –∑–∞ {stake} ‚≠êÔ∏è", amount=stake)]

    try:
        bot.send_invoice(
            call.message.chat.id,
            title=f"–°–ø–∏–Ω –∑–∞ {stake} ‚≠êÔ∏è",
            description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–æ—Ç –º–∞—à–∏–Ω—É",
            invoice_payload=payload,
            provider_token=PROVIDER_TOKEN,
            currency=CURRENCY,
            prices=prices
        )
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    bot.answer_callback_query(call.id)

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query: PreCheckoutQuery):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok
