import os
import asyncio
from yt_dlp import YoutubeDL
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    ContextTypes, CallbackQueryHandler
)

TOKEN = os.getenv("Song")  # –í–∞—à —Ç–æ–∫–µ–Ω –≤ Render

# ===================== YT-DLP =====================
YDL_OPTS = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'outtmpl': 'song.%(ext)s',
    'quiet': True,
    'postprocessors': [],
}

# ===================== –ü–†–û–ì–†–ï–°–° =====================
def build_bar(steps: int) -> str:
    return f"{'üü©' * steps}{'‚¨õ' * (10 - steps)} {steps*10}%"

async def progress_task(msg, query: str, done_event: asyncio.Event, step_delay: float = 0.6):
    for step in range(1, 11):
        if done_event.is_set():
            await msg.edit_text(f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query} | {build_bar(10)}")
            return
        await msg.edit_text(f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query} | {build_bar(step)}")
        await asyncio.sleep(step_delay)
    if not done_event.is_set():
        await msg.edit_text(f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query} | {build_bar(10)}")

def download_with_ytdlp(query: str):
    with YoutubeDL(YDL_OPTS) as ydl:
        info = ydl.extract_info(f"ytsearch:{query}", download=True)
        entry = info['entries'][0]
        filename = ydl.prepare_filename(entry)
        return entry, filename

# ===================== –ú–ï–ù–Æ =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéµ –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏", callback_data="search_help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(keyboard)

# ===================== –ö–û–ú–ê–ù–î–´ =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SongAura üé∂\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /search –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏")
        return

    query = " ".join(context.args)
    msg = await update.message.reply_text(f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query} | {build_bar(0)}")

    done_event = asyncio.Event()
    progress = asyncio.create_task(progress_task(msg, query, done_event))

    try:
        entry, file_name = await asyncio.to_thread(download_with_ytdlp, query)
        done_event.set()
        await progress

        await update.message.reply_audio(
            open(file_name, "rb"),
            title=entry.get('title', query),
            caption="üé∂ –°–¥–µ–ª–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @SongAuraBot"
        )
        try:
            os.remove(file_name)
        except Exception:
            pass

    except Exception as e:
        done_event.set()
        if not progress.done():
            await progress
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "search_help":
        await query.edit_message_text(
            "üéµ –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n\n"
            "`/search –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–µ—Å–Ω–∏`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/search —Ç—ã –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ—Ç–∞`",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )

    elif query.data == "about":
        await query.edit_message_text(
            "‚ÑπÔ∏è *–û SongAura*\n\n"
            "üé∂ –≠—Ç–æ—Ç –±–æ—Ç –∏—â–µ—Ç –º—É–∑—ã–∫—É –Ω–∞ YouTube –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∞—É–¥–∏–æ –ø—Ä—è–º–æ —Å—é–¥–∞.\n\n"
            "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
            "- `/start` ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
            "- `/search —Ç–µ–∫—Å—Ç` ‚Äî –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é\n\n"
            "üöÄ –ê–≤—Ç–æ—Ä: @SongAuraBot",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )

    elif query.data == "back":
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é SongAura üé∂\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=main_menu()
        )

# ===================== MAIN =====================
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç SongAura –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
