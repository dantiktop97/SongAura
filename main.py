import os
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

TOKEN = os.getenv("Song")  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 6525179440       # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è

# ===================== –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç =====================
with open("quotes.json", encoding="utf-8") as f:
    quotes = json.load(f)

used_quotes = set()

# ===================== –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====================
USERS_FILE = "users.json"
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
else:
    users = []

# ===================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("üòÇ –Æ–º–æ—Ä", callback_data="humor")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    if ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin")])
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]])

def quote_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

# ===================== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuotesAuraBot!\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
    )

# ===================== –í—ã–¥–∞—á–∞ —Ü–∏—Ç–∞—Ç =====================
def get_random_quote():
    global used_quotes
    available = list(set(quotes) - used_quotes)
    if not available:
        used_quotes.clear()
        available = quotes.copy()
    quote = random.choice(available)
    used_quotes.add(quote)
    return quote

# ===================== –ö–æ–º–∞–Ω–¥—ã =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username not in users:
        users.append(username)
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

    await update.message.reply_text(full_greeting(user_name), reply_markup=main_menu())

# ===================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_name = query.from_user.first_name or "–¥—Ä—É–≥"
    user_id = query.from_user.id

    if query.data == "random_quote":
        quote = get_random_quote()
        await query.edit_message_text(f"üí¨ {quote}", reply_markup=quote_menu())

    elif query.data == "humor":
        joke = "üòÇ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç–ª–∞—è ‚Äî –¥–ª—è —Å–ª–∞–±–∞–∫–æ–≤!"
        await query.edit_message_text(joke, reply_markup=back_menu())

    elif query.data == "about":
        text = "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ —é–º–æ—Ä.\nüéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è!"
        await query.edit_message_text(text, reply_markup=back_menu())

    elif query.data == "admin" and user_id == ADMIN_ID:
        last_users = "\n".join(users[-10:])
        text = f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{last_users}"
        await query.edit_message_text(text, reply_markup=back_menu())

    elif query.data == "back":
        await query.edit_message_text(full_greeting(user_name), reply_markup=main_menu())

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("QuotesAuraBot –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
