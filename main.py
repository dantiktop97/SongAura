import os
import random
import time
import json
import threading
from flask import Flask, request, abort
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = os.getenv("STAR")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "")
CURRENCY = os.getenv("CURRENCY", "XTR")
PORT = int(os.getenv("PORT", "10000"))
RENDER_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
BALANCE_FILE = "balances.json"

if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è STAR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)
balances_lock = threading.Lock()

# ====== –°–∏–º–≤–æ–ª—ã –∏ —à–∞–Ω—Å—ã ======
SYMBOLS = [("üçí", 25), ("üçã", 25), ("üçâ", 20), ("‚≠ê", 15), ("7Ô∏è‚É£", 5)]
MULTIPLIERS = {"fruit": 2, "star": 3, "jackpot": 5}

# ====== –ë–∞–ª–∞–Ω—Å ======
def load_balances():
    try:
        with balances_lock:
            if not os.path.exists(BALANCE_FILE):
                return {}
            with open(BALANCE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception:
        return {}

def save_balances(balances):
    try:
        with balances_lock:
            with open(BALANCE_FILE, "w", encoding="utf-8") as f:
                json.dump(balances, f, ensure_ascii=False)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", e)

balances = load_balances()

def get_balance(user_id):
    with balances_lock:
        return int(balances.get(str(user_id), 100))

def set_balance(user_id, value):
    with balances_lock:
        balances[str(user_id)] = int(value)
        save_balances(balances)

# ====== –†—É–ª–µ—Ç–∫–∞ ======
def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", MULTIPLIERS["jackpot"]
        if s == "‚≠ê":
            return "star", MULTIPLIERS["star"]
        return "fruit", MULTIPLIERS["fruit"]
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–ü–æ–±–µ–¥–∞!</b> {' '.join(mid)}\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è"
        )

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    return kb

def play_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ö–†–£–¢–ò–¢–¨ –ó–ê 15 ‚≠êÔ∏è", callback_data="spin_15"))
    kb.add(InlineKeyboardButton("–ö–†–£–¢–ò–¢–¨ –ó–ê 25 ‚≠êÔ∏è", callback_data="spin_25"))
    kb.add(InlineKeyboardButton("–ö–†–£–¢–ò–¢–¨ –ó–ê 50 ‚≠êÔ∏è", callback_data="spin_50"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def profile_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="play"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ====== –¢–µ–∫—Å—Ç—ã ======
def welcome_text(name):
    return (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚Äî –∑–¥–µ—Å—å –≤—ã–∏–≥—Ä—ã—à–∏ –Ω–µ –∂–¥—É—Ç, –æ–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è! ‚ú®\n\n"
        f"üéÅ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã</b> ‚Äî –ø—Ä—è–º–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç\n"
        f"üé∞ <b>–†–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∏–≥—Ä—ã</b> ‚Äî –∫–∞–∂–¥—ã–π —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π\n"
        f"üì≤ <b>–£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚Äî –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram\n\n"
        f"–ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞—á—É! üåü"
    )

def play_text():
    return (
        "üé∞ <b>–†–∞–∑–¥–µ–ª –ò–ì–†–ê–¢–¨</b>\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:\n"
        "‚Ä¢ –ó–∞ 15 ‚≠êÔ∏è –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å –¥–æ 100 ‚≠êÔ∏è\n"
        "‚Ä¢ –ó–∞ 25 ‚≠êÔ∏è ‚Äî –¥–æ 150 ‚≠êÔ∏è\n"
        "‚Ä¢ –ó–∞ 50 ‚≠êÔ∏è ‚Äî –¥–æ 250 ‚≠êÔ∏è\n\n"
        "–ß–µ–º –≤—ã—à–µ —Å—Ç–∞–≤–∫–∞ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à!"
    )

def profile_text(uid, bal):
    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî <b>ID:</b> {uid}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {bal} ‚≠êÔ∏è\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å.\n"
        f"–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! ‚ú®üé∞"
    )

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@bot.message_handler(commands=["start"])
def start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    bot.send_message(message.chat.id, welcome_text(name), reply_markup=main_menu_kb(), parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "play")
def play(call):
    bot.edit_message_text(play_text(), call.message.chat.id, call.message.message_id, reply_markup=play_kb(), parse_mode="HTML")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile(call):
    uid = call.from_user.id
    bal = get_balance(uid)
    bot.edit_message_text(profile_text(uid, bal), call.message.chat.id, call.message.message_id, reply_markup=profile_kb(), parse_mode="HTML")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back(call):
    name = call.from_user.first_name or "–∏–≥—Ä–æ–∫"
    bot.edit_message_text(welcome_text(name), call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb(), parse_mode="HTML")
    bot.answer_callback_query(call.id)

# ====== –û–ø–ª–∞—Ç–∞ ======
@bot.callback_query_handler(func=lambda call: call.data in {"spin_15", "spin_25", "spin_50"})
def spin_pay(call):
    stake_map = {"spin_15": 15, "spin_25": 25, "spin_50": 50}
    stake = stake_map[call.data]
    payload = f"spin:{call.from_user.id}:{stake}:{int(time.time()*1000)}"
    # amount for LabeledPrice for Stars mode is the unit count (1 star = 1)
    prices = [LabeledPrice(label=f"–°–ø–∏–Ω –∑–∞ {stake} ‚≠êÔ∏è", amount=stake)]

    try:
        bot.send_invoice(
            call.message.chat.id,
            title=f"–°–ø–∏–Ω –∑–∞ {stake} ‚≠êÔ∏è",
            description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–æ—Ç –º–∞—à–∏–Ω—É",
            invoice_payload=payload,
            provider_token=PROVIDER_TOKEN,
            currency=CURRENCY,
            prices=prices
        )
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        return

    bot.answer_callback_query(call.id)

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query: PreCheckoutQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É
    try:
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception:
        pass

@bot.message_handler(content_types=["successful_payment"])
def got_payment(message):
    sp = message.successful_payment
    if not sp:
        return
    payload = getattr(sp, "invoice_payload", None) or getattr(sp, "payload", "")
    if not isinstance(payload, str) or not payload.startswith("spin:"):
        # –Ω–µ –Ω–∞—à payload
        return

    parts = payload.split(":")
    try:
        stake = int(parts[2])
    except Exception:
        stake = 15

    user_id = message.from_user.id
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É webhook
    threading.Thread(target=do_spin, args=(message.chat.id, user_id, stake)).start()

def do_spin(chat_id, user_id, stake):
    try:
        msg = bot.send_message(chat_id, "üé∞ –ë–∞—Ä–∞–±–∞–Ω—ã –∫—Ä—É—Ç—è—Ç—Å—è‚Ä¶")
    except Exception:
        return

    # –ê–Ω–∏–º–∞—Ü–∏—è: –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤
    frames = [spin_once() for _ in range(3)]
    try:
        for frame in frames:
            bot.edit_message_text(matrix_to_text(frame), chat_id, msg.message_id)
            time.sleep(0.6)
    except Exception:
        pass

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final = spin_once()
    result, mult = eval_middle_row(final)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å: —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    bal = get_balance(user_id)
    bal -= stake
    if result != "lose":
        win = stake * mult
        bal += win
    set_balance(user_id, bal)

    text = make_result_text(final, result, mult, bal)
    try:
        bot.edit_message_text(text, chat_id, msg.message_id, reply_markup=result_kb(), parse_mode="HTML")
    except Exception:
        bot.send_message(chat_id, text, reply_markup=result_kb(), parse_mode="HTML")

# ====== Flask webhook endpoint ======
@app.route("/" + TOKEN, methods=["POST"])
def webhook():
    if request.headers.get("content-type") != "application/json":
        abort(403)
    json_string = request.stream.read().decode("utf-8")
    try:
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞:", e)
    return "OK", 200

@app.route("/")
def index():
    return "StarryCasino –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# ====== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏ –∑–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    if RENDER_HOST:
        webhook_url = f"https://{RENDER_HOST}/{TOKEN}"
        try:
            bot.remove_webhook()
        except Exception:
            pass
        try:
            ok = bot.set_webhook(url=webhook_url)
            print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url, ok)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:", e)
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ BotFather/Telegram API.")
    else:
        print("RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (Render –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ PORT)
    app.run(host="0.0.0.0", port=PORT)
