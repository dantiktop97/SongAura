#!/usr/bin/env python3
import os
import time
import random
import json
import threading
import traceback
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = os.getenv("STAR")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "").strip()  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏
SPIN_PRICE_AMOUNT = int(os.getenv("SPIN_PRICE_AMOUNT", "100"))  # –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥.
CURRENCY = os.getenv("CURRENCY", "RUB")

if not TOKEN:
    raise SystemExit("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è STAR")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# ====== –§–∞–π–ª—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ======
BALANCE_FILE = "balances.json"
PAYMENTS_FILE = "payments.json"  # –ª–æ–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ —Ñ–µ–π–∫–æ–≤—ã—Ö charge_id —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥—É–±–ª–∏
spin_locks = set()
pending_spin_invoice = {}  # user_id -> {"chat_id": int, "msg_id": int}

# ====== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è JSON —Ö—Ä–∞–Ω–µ–Ω–∏—è ======
def _load_json(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def _save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)

# –ë–∞–ª–∞–Ω—Å—ã
def load_balances():
    return _load_json(BALANCE_FILE, {})

def save_balances(balances):
    _save_json(BALANCE_FILE, balances)

balances = load_balances()

def get_balance(user_id):
    return int(balances.get(str(user_id), 0))

def set_balance(user_id, value):
    balances[str(user_id)] = int(value)
    save_balances(balances)

def add_balance(user_id, delta):
    balances[str(user_id)] = get_balance(user_id) + int(delta)
    save_balances(balances)

# –õ–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–µ–ª–µ–≥—Ä–∞–º charge id –∏ —Ñ–µ–π–∫–∏)
def load_payments():
    return _load_json(PAYMENTS_FILE, {})

def save_payments(payments):
    _save_json(PAYMENTS_FILE, payments)

payments = load_payments()  # key: charge_id -> info dict

def record_payment(charge_id, info):
    if not charge_id:
        return False
    if charge_id in payments:
        return False
    payments[charge_id] = info
    save_payments(payments)
    return True

# ====== –†—É–ª–µ—Ç–∫–∞: —Å–∏–º–≤–æ–ª—ã –∏ –ª–æ–≥–∏–∫–∞ ======
SYMBOLS = [
    ("üçí", 25),
    ("üçã", 25),
    ("üçâ", 20),
    ("‚≠ê", 15),
    ("7Ô∏è‚É£", 5),
]

def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", 5
        if s == "‚≠ê":
            return "star", 3
        return "fruit", 2
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑, —É–¥–∞—á–∞ —Ä—è–¥–æ–º! ‚ú®üé∞"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —Å–æ–±—Ä–∞–ª–∏: {' '.join(mid)}\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è\n"
            f"–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! üçÄ"
        )

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton("üéüÔ∏è –ö–£–ü–ò–¢–¨ –°–ü–ò–ù (1‚≠ê)", callback_data="buy_spin"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    return kb

def roulette_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéüÔ∏è –ö–£–ü–ò–¢–¨ –°–ü–ò–ù (1‚≠ê)", callback_data="buy_spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def profile_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="buy_spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã —Å—Ç–∞—Ä—Ç/–Ω–∞–≤–∏–≥–∞—Ü–∏—è ======
try:
    bot.remove_webhook()
except Exception:
    pass

@bot.message_handler(commands=['start'])
def start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚Äî –∏–≥—Ä–∞ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã.\n\n"
        f"–ù–∞–∂–º–∏ –ö–£–ü–ò–¢–¨ –°–ü–ò–ù —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å 1‚≠ê –¥–ª—è —Å–ø–∏–Ω–∞."
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb(), parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "play")
def play(call):
    bot.edit_message_text(
        "üé∞ <b>–†–∞–∑–¥–µ–ª —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
        "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –∏ –∫—É–ø–∏ —Å–ø–∏–Ω –∑–∞ 1‚≠ê.",
        call.message.chat.id, call.message.message_id, reply_markup=roulette_kb(), parse_mode="HTML"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile(call):
    uid = call.from_user.id
    bal = get_balance(uid)
    bot.edit_message_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî <b>–í–∞—à ID:</b> {uid}\nüí∞ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {bal} ‚≠êÔ∏è",
        call.message.chat.id, call.message.message_id, reply_markup=profile_kb(), parse_mode="HTML"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back(call):
    start(call.message)
    bot.answer_callback_query(call.id)

# ====== BUY SPIN: –∫–æ–≥–¥–∞ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å —Å–ø–∏–Ω ======
def _make_unique_payload(prefix, user_id):
    return f"{prefix}:{user_id}:{int(time.time()*1000)}"

@bot.callback_query_handler(func=lambda call: call.data == "buy_spin")
def cb_buy_spin(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if chat_id in spin_locks:
        bot.answer_callback_query(call.id, "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ø–∏–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=False)
        return

    # –µ—Å–ª–∏ –Ω–µ—Ç PROVIDER_TOKEN ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é "–æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥–∞–º–∏" –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if not PROVIDER_TOKEN:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠êÔ∏è", callback_data=f"fake_pay:{user_id}"))
        kb.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="fake_cancel"))
        try:
            bot.edit_message_text(
                f"üí≥ –û–ø–ª–∞—Ç–∞ —Å–ø–∏–Ω–∞\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 ‚≠êÔ∏è\n–ù–∞–∂–º–∏—Ç–µ –û–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ 1 ‚≠êÔ∏è —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.",
                chat_id, call.message.message_id, reply_markup=kb
            )
        except Exception:
            bot.send_message(chat_id,
                f"üí≥ –û–ø–ª–∞—Ç–∞ —Å–ø–∏–Ω–∞\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 ‚≠êÔ∏è\n–ù–∞–∂–º–∏—Ç–µ –û–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ 1 ‚≠êÔ∏è —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.",
                reply_markup=kb
            )
        bot.answer_callback_query(call.id)
        return

    # –ï—Å–ª–∏ PROVIDER_TOKEN –∑–∞–¥–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–æ–π—Å (payload —É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
    payload = _make_unique_payload("spin", user_id)
    prices = [LabeledPrice(label="‚òÖ1", amount=SPIN_PRICE_AMOUNT)]
    try:
        invoice_msg = bot.send_invoice(
            chat_id=chat_id,
            title="–ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–∞",
            description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–æ—Ç –º–∞—à–∏–Ω–∞ ‚Äî 1 ‚òÖ",
            invoice_payload=payload,
            provider_token=PROVIDER_TOKEN,
            currency=CURRENCY,
            prices=prices
        )
    except TypeError:
        invoice_msg = bot.send_invoice(
            chat_id=chat_id,
            title="–ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–∞",
            description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–æ—Ç –º–∞—à–∏–Ω–∞ ‚Äî 1 ‚òÖ",
            payload=payload,
            provider_token=PROVIDER_TOKEN,
            currency=CURRENCY,
            prices=prices
        )

    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ successful_payment
    try:
        if invoice_msg is not None:
            pending_spin_invoice[user_id] = {"chat_id": invoice_msg.chat.id, "msg_id": invoice_msg.message_id}
        else:
            pending_spin_invoice[user_id] = {"chat_id": chat_id, "msg_id": call.message.message_id}
    except Exception:
        pending_spin_invoice[user_id] = {"chat_id": chat_id, "msg_id": call.message.message_id}

    bot.answer_callback_query(call.id, "–û—Ç–∫—Ä—ã–ª–æ—Å—å –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã")

# ====== Fake pay callbacks (—Ä–µ–∂–∏–º –±–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞) ======
@bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("fake_pay:"))
def cb_fake_pay(call):
    # data = fake_pay:<user_id_in_payload>
    parts = call.data.split(":", 1)
    try:
        target_uid = int(parts[1])
    except Exception:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    user_id = call.from_user.id
    if user_id != target_uid:
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.", show_alert=True)
        return

    bal = get_balance(user_id)
    if bal < 1:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", show_alert=True)
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º 1 –∑–≤–µ–∑–¥—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º fake charge id —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å –¥—É–±–ª–µ–π
    fake_charge = f"fake-{user_id}-{int(time.time()*1000)}"
    success_recorded = record_payment(fake_charge, {
        "type": "fake",
        "user_id": user_id,
        "time": int(time.time())
    })
    if not success_recorded:
        bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    set_balance(user_id, bal - 1)
    try:
        pending_spin_invoice[user_id] = {"chat_id": call.message.chat.id, "msg_id": call.message.message_id}
    except Exception:
        pending_spin_invoice[user_id] = {"chat_id": call.message.chat.id, "msg_id": call.message.message_id}

    bot.answer_callback_query(call.id, f"–û–ø–ª–∞—Ç–∞ 1 ‚≠êÔ∏è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (id {fake_charge}). –ó–∞–ø—É—Å–∫–∞—é —Å–ø–∏–Ω.")
    bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. ChargeID: {fake_charge}. –°–ø–∏—Å–∞–Ω–æ 1 ‚≠êÔ∏è.")
    threading.Thread(target=_run_spin_animation_after_payment, args=(call.message.chat.id, call.message.message_id, user_id)).start()

@bot.callback_query_handler(func=lambda call: call.data == "fake_cancel")
def cb_fake_cancel(call):
    try:
        bot.edit_message_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb())
    except Exception:
        pass
    bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")

# ====== PreCheckout handler (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤) ======
@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_q):
    try:
        bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    except Exception:
        pass

# ====== Successful payment handler ======
@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    sp = message.successful_payment
    if not sp:
        return
    payload = getattr(sp, "invoice_payload", None) or getattr(sp, "payload", None) or ""
    user_id = message.from_user.id
    ext_id = getattr(sp, "telegram_payment_charge_id", None)
    amount = getattr(sp, "total_amount", None) or getattr(sp, "invoice_total_amount", None) or 0
    currency = getattr(sp, "currency", None) or CURRENCY

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º telegram_payment_charge_id
    if ext_id and ext_id in payments:
        try:
            message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        except Exception:
            pass
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞—Ç—ë–∂
    info = {
        "type": "real",
        "user_id": user_id,
        "time": int(time.time()),
        "amount": amount,
        "currency": currency
    }
    if ext_id:
        record_payment(ext_id, info)

    # –ó–∞—á–∏—Å–ª—è–µ–º 1 –∑–≤–µ–∑–¥—É (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏)
    try:
        add_balance(user_id, 1)
    except Exception:
        pass

    # –ï—Å–ª–∏ payload ‚Äî spin:... ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏–Ω-–∞–Ω–∏–º–∞—Ü–∏—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if str(payload).startswith("spin:"):
        pending = pending_spin_invoice.pop(user_id, None)
        if pending:
            chat_id = pending["chat_id"]; msg_id = pending["msg_id"]
        else:
            sent = bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é —Å–ø–∏–Ω...")
            chat_id = sent.chat.id; msg_id = sent.message_id
        threading.Thread(target=_run_spin_animation_after_payment, args=(chat_id, msg_id, user_id)).start()
    else:
        try:
            bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. 1 ‚≠êÔ∏è –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
        except Exception:
            pass

# ====== –ó–∞–ø—É—Å–∫ —Å–ø–∏–Ω–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ ======
def _run_spin_animation_after_payment(chat_id, msg_id, user_id):
    try:
        spin_locks.add(chat_id)
        frames = [spin_once() for _ in range(4)]
        for frame in frames[:-1]:
            try:
                bot.edit_message_text(matrix_to_text(frame) + "\n\nüé∞ –ö—Ä—É—Ç–∏—Ç—Å—è...", chat_id, msg_id)
            except Exception:
                pass
            time.sleep(0.6)

        final = spin_once()
        result, mult = eval_middle_row(final)

        # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (–µ—Å–ª–∏ –≤—ã–∏–≥—Ä—ã—à –µ—Å—Ç—å)
        if result != "lose":
            win = 1 * mult
            add_balance(user_id, win)

        new_bal = get_balance(user_id)
        text = make_result_text(final, result, mult, new_bal)
        try:
            bot.edit_message_text(text, chat_id, msg_id, reply_markup=result_kb(), parse_mode="HTML")
        except Exception:
            bot.send_message(chat_id, text, reply_markup=result_kb(), parse_mode="HTML")
    except Exception:
        try:
            bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ø–∏–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", chat_id, msg_id)
        except Exception:
            pass
        traceback.print_exc()
    finally:
        spin_locks.discard(chat_id)

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
if __name__ == "__main__":
    try:
        print("Bot started")
        bot.infinity_polling()
    except KeyboardInterrupt:
        pass
