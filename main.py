import os
import json
import threading
import asyncio
from flask import Flask
import telebot
from telethon import TelegramClient

# ====== –ö–æ–Ω—Ñ–∏–≥–∏ ======
TOKEN = os.getenv("PLAY")       # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–∞ PLAY
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
PORT = int(os.getenv("PORT", "8000"))
SESSION_NAME = "me_userbot"    # –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ Telethon

if not TOKEN or not API_ID or not API_HASH:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PLAY, API_ID –∏–ª–∏ API_HASH")

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ======
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(name)

# ====== –ë–∞–ª–∞–Ω—Å ====== (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
BALANCE_FILE = "balances.json"
balances_lock = threading.Lock()

def load_balances():
    try:
        with balances_lock:
            if not os.path.exists(BALANCE_FILE):
                return {}
            with open(BALANCE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception:
        return {}

def save_balances(balances):
    try:
        with balances_lock:
            with open(BALANCE_FILE, "w", encoding="utf-8") as f:
                json.dump(balances, f, ensure_ascii=False)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:", e)

balances = load_balances()

# ====== –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ======
targets = [
    -1002163895139,
    -1001300573578,
    -1002094964873,
    -1002423716563,
    -1002768695068
]

message_text = """
–•–û–ß–ï–®–¨ –ù–ê–ö–†–£–¢–ò–¢–¨ –ü–û–î–ü–ò–°–ß–ò–ö–û–í –ò–õ–ò –†–ï–ê–ö–¶–ò–ô‚ùì

‚úÖ–¢–û–ì–î–ê –¢–ï–ë–ï –ö –ù–ê–ú ‚úÖ

‚úÖ–ù–ê–ö–†–£–¢–ö–ê –ó–ê –†–ï–§–ï–†–ê–õ–û–í‚úÖ

          üëáüëáüëá

üëâ  @Hshzgsbot (https://t.me/Hshzgsbot?start=7902738665)  üëà
"""

report_user_id = 7902738665  # –∫—É–¥–∞ —Å–ª–∞—Ç—å –æ—Ç—á–µ—Ç
interval_minutes = 15

# ====== –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ ======
async def send_messages(client):
    success = []
    failed = []
    for chat_id in targets:
        try:
            await client.send_message(chat_id, message_text)
            success.append(str(chat_id))
        except Exception:
            failed.append(str(chat_id))
    report = "üì¢ –û—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ:\n\n"
    report += "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤:\n" + ("\n".join(success) if success else "–Ω–µ—Ç") + "\n\n"
    report += "‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤:\n" + ("\n".join(failed) if failed else "–Ω–µ—Ç") + "\n"
    await client.send_message(report_user_id, report)

async def bot_loop():
    async with TelegramClient(SESSION_NAME, API_ID, API_HASH) as client:
        while True:
            await send_messages(client)
            await asyncio.sleep(interval_minutes * 60)

def start_telethon_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(bot_loop())

# ====== Flask + Telebot —Å–µ—Ä–≤–µ—Ä ======
@app.route("/")
def index():
    return "Bot is running"

def run_telebot():
    bot.polling(none_stop=True)

if name == "main":
    threading.Thread(target=start_telethon_bot, daemon=True).start()
    threading.Thread(target=run_telebot, daemon=True).start()
    app.run(host="0.0.0.0", port=PORT)
