import asyncio
import json
from telethon import TelegramClient, events
import os

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é (userbot)
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session_file = "sessions/me.session"  # —Ç–≤–æ—è —Å–µ—Å—Å–∏—è –≤ GitHub

client = TelegramClient(session_file, api_id, api_hash)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
GROUPS_FILE = "groups.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
if os.path.exists(GROUPS_FILE):
    with open(GROUPS_FILE, "r", encoding="utf-8") as f:
        GROUPS = json.load(f)
else:
    GROUPS = [
        -1001300573578,
        -1001966255283,
        -1002423716563,
        -1002633910583,
        -1002489693744,
        -1002942057666
    ]
    with open(GROUPS_FILE, "w", encoding="utf-8") as f:
        json.dump(GROUPS, f, ensure_ascii=False, indent=2)

# –¢–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏
MESSAGE = "‚≠êüéÆüí∏ –ü—Ä–∏–≤–µ—Ç! –ù–∞—à—ë–ª –±–æ—Ç, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã –∑–∞ –¥—Ä—É–∑–µ–π –∏ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –¥–µ–Ω—å–≥–∏! –ú–Ω–æ–≥–æ –∏–≥—Ä –∏ –∑–∞–¥–∞–Ω–∏–π!\nüëâ https://t.me/STARS_SNOW_bot?start=6525179440"

async def auto_broadcast():
    while True:
        for group_id in GROUPS:
            try:
                await client.send_message(group_id, MESSAGE)
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
        await asyncio.sleep(300)  # –ø–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
@client.on(events.NewMessage(pattern=r"/addgroup (\-?\d+)"))
async def add_group(event):
    sender = await event.get_sender()
    if sender.id != client.get_me().id:
        return  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø—ã

    new_group = int(event.pattern_match.group(1))
    if new_group not in GROUPS:
        GROUPS.append(new_group)
        with open(GROUPS_FILE, "w", encoding="utf-8") as f:
            json.dump(GROUPS, f, ensure_ascii=False, indent=2)
        await event.reply(f"‚úÖ –ì—Ä—É–ø–ø–∞ {new_group} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        await event.reply("‚ö†Ô∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

async def main():
    await client.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ê–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")
    asyncio.create_task(auto_broadcast())
    # –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥
    await client.run_until_disconnected()

if __name__ == "__main__":
    client.loop.run_until_complete(main())
