import asyncio
import random
import aiosqlite
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import LabeledPrice, PreCheckoutQuery

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
# –°–µ–∫—Ä–µ—Ç STAR –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
STAR = os.getenv("STAR")
if not STAR:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è STAR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

DB_PATH = "casino.sqlite3"

bot = Bot(token=STAR)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º STAR –∫–∞–∫ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
dp = Dispatcher()

# ================== –ë–ê–ó–ê ==================
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS spins (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            result TEXT NOT NULL
        )
        """)
        await db.commit()

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Å–ø–∏–Ω üé∞ (1‚≠ê)", callback_data="buy_spin")]]
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ üé≤!\n–ñ–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å–ø–∏–Ω:", 
        reply_markup=kb
    )

# ================== –ö–£–ü–ò–¢–¨ –°–ü–ò–ù ==================
@dp.callback_query(F.data == "buy_spin")
async def cb_buy_spin(callback: types.CallbackQuery):
    prices = [LabeledPrice(label="üé∞ –°–ø–∏–Ω", amount=1)]  # 1 Star
    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–û–¥–∏–Ω —Å–ø–∏–Ω",
        description="–ö—Ä—É—Ç–∏ —Å–ª–æ—Ç –∑–∞ 1‚≠ê!",
        payload="spin",           # –ø–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        provider_token="",        # —Ç–µ—Å—Ç/Stars
        currency="XTR",
        prices=prices
    )
    await callback.answer()

# ================== –ü–†–ï–î–û–ü–õ–ê–¢–ê ==================
@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout_q: PreCheckoutQuery):
    await pre_checkout_q.answer(ok=True)

# ================== –£–°–ü–ï–®–ù–´–ô –ü–õ–ê–¢–Å–ñ ==================
@dp.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    sp = message.successful_payment
    if not sp or sp.invoice_payload != "spin":
        return

    # üé∞ –ö—Ä—É—Ç–∏–º —Å–ª–æ—Ç
    symbols = ["üçí", "üçã", "üçä", "üçá", "‚≠ê", "üíé"]
    result = [random.choice(symbols) for _ in range(3)]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    if len(set(result)) == 1:
        text = f"üéâ JACKPOT! {''.join(result)}\n–¢—ã –ø–æ–π–º–∞–ª —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö!"
    else:
        text = f"–ö—Ä—É—Ç–∏—Ç—Å—è —Å–ª–æ—Ç... {''.join(result)}\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üôÇ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO spins (user_id, username, result) VALUES (?, ?, ?)",
            (message.from_user.id, message.from_user.username, ''.join(result))
        )
        await db.commit()

    await message.answer(text)

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    await init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! ‚≠ê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç STAR.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
