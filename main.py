import os
import requests
from yt_dlp import YoutubeDL
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import asyncio

# ===================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====================
TOKEN = os.getenv("Song")  # –°–µ–∫—Ä–µ—Ç Render
YDL_OPTS = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'outtmpl': 'song.%(ext)s',
    'quiet': True,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192'
    }],
}

# ===================== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SongAura ‚Äî —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n"
        "üöÄ –Ø –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–∂—É –ø–µ—Å–Ω–∏ –Ω–∞ RuTube –∏ –ø—Ä–∏—Å—ã–ª–∞—é –∏—Ö –ø—Ä—è–º–æ —Å—é–¥–∞.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "- /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "- /search —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é\n\n"
        "üéµ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π!"
    )

# ===================== –ú–µ–Ω—é =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéµ –ö–∞–∫ –∏—Å–∫–∞—Ç—å –ø–µ—Å–Ω–∏", callback_data="search_help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(keyboard)

# ===================== –ü–æ–∏—Å–∫ RuTube =====================
def search_rutube(query: str) -> str:
    """–ò—â–µ–º –≤–∏–¥–µ–æ –Ω–∞ RuTube –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ"""
    search_url = f"https://rutube.ru/api/v3/search/video/?query={query.replace(' ', '%20')}&count=1"
    resp = requests.get(search_url)
    if resp.status_code != 200:
        raise Exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ RuTube")
    data = resp.json()
    if not data.get("results"):
        raise Exception("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    video_id = data["results"][0]["id"]
    return f"https://rutube.ru/video/{video_id}/"

def download_rutube_audio(query: str):
    """–°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Å RuTube —á–µ—Ä–µ–∑ yt-dlp"""
    url = search_rutube(query)
    with YoutubeDL(YDL_OPTS) as ydl:
        info = ydl.extract_info(url, download=True)
        filename = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")
        return info, filename

# ===================== –ü—Ä–æ–≥—Ä–µ—Å—Å =====================
def build_bar(steps: int) -> str:
    return f"{'‚úÖ' * steps}{'‚¨ú' * (10 - steps)} {steps*10}%"

async def progress_task(msg, query: str, done_event: asyncio.Event, step_delay: float = 0.5):
    last_text = ""
    for step in range(1, 11):
        if done_event.is_set():
            final_text = f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query}\n{build_bar(10)} ‚úÖ"
            if final_text != last_text:
                await msg.edit_text(final_text)
            return
        current_text = f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query}\n{build_bar(step)}"
        if current_text != last_text:
            await msg.edit_text(current_text)
            last_text = current_text
        await asyncio.sleep(step_delay)

# ===================== –ö–æ–º–∞–Ω–¥—ã =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(full_greeting(user_name), reply_markup=main_menu())

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /search –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ üéµ")
        return
    query_text = " ".join(context.args)
    msg = await update.message.reply_text(f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query_text}\n{build_bar(0)}")
    done_event = asyncio.Event()
    progress = asyncio.create_task(progress_task(msg, query_text, done_event))

    try:
        info, file_name = await asyncio.to_thread(download_rutube_audio, query_text)
        done_event.set()
        await progress
        await update.message.reply_audio(
            open(file_name, "rb"),
            title=info.get('title', query_text),
            caption="üé∂ SongAura"
        )
        os.remove(file_name)
    except Exception as e:
        done_event.set()
        await progress
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")

# ===================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_name = query.from_user.first_name or "–¥—Ä—É–≥"

    if query.data == "search_help":
        await query.edit_message_text(
            "üéµ –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n\n"
            "`/search –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–µ—Å–Ω–∏`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/search –í—Ä–µ–º—è –∏ –°—Ç–µ–∫–ª–æ ‚Äî –ù–∞–≤—Å–µ–≥–¥–∞`\n"
            "üí° –°–æ–≤–µ—Ç: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫.",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )
    elif query.data == "about":
        await query.edit_message_text(
            "‚ÑπÔ∏è *–û SongAura*\n\n"
            "üé∂ SongAura ‚Äî –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram!\n"
            "üöÄ –ë—ã—Å—Ç—Ä–æ –∏—â–µ—Ç –ø–µ—Å–Ω–∏ –Ω–∞ RuTube –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏—Ö —Å—é–¥–∞.\n"
            "–ê–≤—Ç–æ—Ä: @SongAuraBot",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )
    elif query.data == "back":
        await query.edit_message_text(full_greeting(user_name), reply_markup=main_menu())

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("–ë–æ—Ç SongAura –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
