import os
from telethon import TelegramClient, events, functions, types
from telethon.tl.custom import Button

# ==== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session_path = "sessions/me.session"  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–π —Å–µ—Å—Å–∏–∏

client = TelegramClient(session_path, api_id, api_hash)

# ==== –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ ====
selected_chats = {}

# ==== –ö–æ–º–∞–Ω–¥–∞ /start ====
@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    user_name = event.sender.first_name or "–¥—Ä—É–≥"
    buttons = [
        [Button.inline("üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —á–∞—Ç—ã", b"show_chats")],
        [Button.inline("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", b"send_message")]
    ]
    await event.respond(f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=buttons)

# ==== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ====
@client.on(events.CallbackQuery)
async def callback_handler(event):
    global selected_chats

    if event.data == b"show_chats":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        dialogs = await client.get_dialogs()
        buttons = []
        for d in dialogs:
            if d.is_group or d.is_channel:
                # –æ—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
                mark = "‚úÖ" if selected_chats.get(d.id) else "‚ùå"
                buttons.append([Button.inline(f"{mark} {d.name}", f"toggle_{d.id}")])
        buttons.append([Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"back")])
        await event.edit("–í—ã–±–µ—Ä–∏ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", buttons=buttons)

    elif event.data.startswith(b"toggle_"):
        chat_id = int(event.data.decode().split("_")[1])
        selected_chats[chat_id] = not selected_chats.get(chat_id, False)
        await callback_handler(event)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫

    elif event.data == b"send_message":
        await event.respond("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã.")

    elif event.data == b"back":
        buttons = [
            [Button.inline("üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —á–∞—Ç—ã", b"show_chats")],
            [Button.inline("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", b"send_message")]
        ]
        await event.edit("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", buttons=buttons)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ====
@client.on(events.NewMessage)
async def message_handler(event):
    if event.text and selected_chats:
        text = event.text
        count = 0
        for chat_id, send in selected_chats.items():
            if send:
                try:
                    await client.send_message(chat_id, text)
                    count += 1
                except:
                    pass
        if count > 0:
            await event.respond(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {count} —á–∞—Ç(–æ–≤).")
        else:
            await event.respond("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        pass  # –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
client.start()
client.run_until_disconnected()
