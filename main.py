import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ===================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====================
TOKEN = os.getenv("Song")  # –í–∞—à —Å–µ–∫—Ä–µ—Ç Render
ADMIN_ID = 6525179440  # –í–∞—à ID
MAX_DISPLAY_USERS = 10

# ===================== –¶–ò–¢–ê–¢–´ –ò –Æ–ú–û–† =====================
# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100.000 —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –∏ —à—É—Ç–æ–∫
quotes = [f"–¶–∏—Ç–∞—Ç–∞ #{i+1}" for i in range(100000)]
jokes = [f"–Æ–º–æ—Ä #{i+1}" for i in range(100000)]

used_quotes = set()
used_jokes = set()
unique_users = []  # –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu(admin=False):
    buttons = [
        [InlineKeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("üòÇ –Æ–º–æ—Ä", callback_data="humor")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    if admin:
        buttons.append([InlineKeyboardButton("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin")])
    return InlineKeyboardMarkup(buttons)

def back_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def quote_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def joke_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –ï—â—ë –æ–¥–∏–Ω —é–º–æ—Ä", callback_data="humor")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuotesAura ‚Äî —Ç–≤–æ–π –±–æ—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏ —é–º–æ—Ä–æ–º!\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "- –í—ã–±–µ—Ä–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–ª–∏ —é–º–æ—Ä\n\n"
        "üéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è!"
    )

# ===================== –ë–ï–ó –ü–û–í–¢–û–†–û–í =====================
def get_random_quote():
    global used_quotes
    available = list(set(quotes) - used_quotes)
    if not available:
        used_quotes.clear()
        available = list(quotes)
    quote = random.choice(available)
    used_quotes.add(quote)
    return quote

def get_random_joke():
    global used_jokes
    available = list(set(jokes) - used_jokes)
    if not available:
        used_jokes.clear()
        available = list(jokes)
    joke = random.choice(available)
    used_jokes.add(joke)
    return joke

# ===================== –ö–û–ú–ê–ù–î–´ =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_name = user.first_name or "–¥—Ä—É–≥"
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if user.username and user.username not in unique_users:
        unique_users.append(user.username)
    
    is_admin = user.id == ADMIN_ID
    await update.message.reply_text(full_greeting(user_name), reply_markup=main_menu(admin=is_admin))

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_name = user.first_name or "–¥—Ä—É–≥"
    is_admin = user.id == ADMIN_ID

    if query.data == "random_quote":
        quote = get_random_quote()
        await query.edit_message_text(text=f"üí¨ {quote}", reply_markup=quote_menu())

    elif query.data == "humor":
        joke = get_random_joke()
        await query.edit_message_text(text=f"üòÇ {joke}", reply_markup=joke_menu())

    elif query.data == "about":
        text = (
            "‚ÑπÔ∏è *–û QuotesAuraBot*\n\n"
            "–ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ —é–º–æ—Ä.\n"
            "üí° –¶–∏—Ç–∞—Ç—ã –∏ —à—É—Ç–∫–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –≤—Å–µ—Ö.\n"
            "üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
        )
        await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "admin" and is_admin:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        last_users = unique_users[-MAX_DISPLAY_USERS:]
        stats_text = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(f"@{u}" for u in reversed(last_users))
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
        ])
        await query.edit_message_text(text=stats_text, reply_markup=keyboard)

    elif query.data == "back":
        await query.edit_message_text(full_greeting(user_name), reply_markup=main_menu(admin=is_admin))

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("QuotesAuraBot –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
