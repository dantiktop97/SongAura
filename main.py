import os
import requests
from bs4 import BeautifulSoup
from yt_dlp import YoutubeDL
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio

# ===================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====================
TOKEN = os.getenv("Song")  # –í–∞—à —Å–µ–∫—Ä–µ—Ç Render
YDL_OPTS = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'outtmpl': 'song.%(ext)s',
    'quiet': True,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192'
    }],
}

# ===================== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SongAura ‚Äî —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n"
        "üöÄ –Ø –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–∂—É –ø–µ—Å–Ω–∏ –Ω–∞ RuTube –∏ –ø—Ä–∏—Å—ã–ª–∞—é –∏—Ö –ø—Ä—è–º–æ —Å—é–¥–∞.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "- /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "- /search —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é\n\n"
        "üéµ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π!"
    )

# ===================== –ü–æ–∏—Å–∫ RuTube =====================
def search_rutube(query: str) -> str:
    """–ò—â–µ–º –≤–∏–¥–µ–æ –Ω–∞ RuTube –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ"""
    search_url = f"https://rutube.ru/search/video/{query.replace(' ', '%20')}/"
    resp = requests.get(search_url)
    if resp.status_code != 200:
        raise Exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ RuTube")
    
    soup = BeautifulSoup(resp.text, "html.parser")
    video_tag = soup.find("a", class_="search-video__title")
    if not video_tag:
        raise Exception("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    video_url = "https://rutube.ru" + video_tag.get("href")
    return video_url

def download_rutube_audio(query: str):
    """–°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Å RuTube —á–µ—Ä–µ–∑ yt-dlp"""
    url = search_rutube(query)
    with YoutubeDL(YDL_OPTS) as ydl:
        info = ydl.extract_info(url, download=True)
        filename = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")
        return info, filename

# ===================== –ö–æ–º–∞–Ω–¥—ã =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(full_greeting(user_name))

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /search –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ üéµ")
        return
    
    query_text = " ".join(context.args)
    msg = await update.message.reply_text(f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query_text}...")

    try:
        info, file_name = await asyncio.to_thread(download_rutube_audio, query_text)
        await update.message.reply_audio(
            open(file_name, "rb"),
            title=info.get('title', query_text),
            caption="üé∂ SongAura"
        )
        os.remove(file_name)
        await msg.delete()
    except Exception as e:
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("search", search_command))

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook
    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
