import os
import random
import time
import json
import threading
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = os.getenv("STAR")
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

BALANCE_FILE = "balances.json"
spin_locks = set()

SYMBOLS = [
    ("üçí", 25),
    ("üçã", 25),
    ("üçâ", 20),
    ("‚≠ê", 15),
    ("7Ô∏è‚É£", 5),
]

# ----- balances -----
def load_balances():
    try:
        with open(BALANCE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_balances(balances):
    with open(BALANCE_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f)

balances = load_balances()

def get_balance(user_id):
    return int(balances.get(str(user_id), 1000))

def set_balance(user_id, value):
    balances[str(user_id)] = int(value)
    save_balances(balances)

# ----- utilities -----
def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", 5
        if s == "‚≠ê":
            return "star", 3
        return "fruit", 2
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} –º–æ–Ω–µ—Ç\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑, —É–¥–∞—á–∞ —Ä—è–¥–æ–º! ‚ú®üé∞"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —Å–æ–±—Ä–∞–ª–∏: {' '.join(mid)}\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} –º–æ–Ω–µ—Ç\n"
            f"–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! üçÄ"
        )

# ----- keyboards (vertical) -----
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    return kb

def roulette_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéüÔ∏è –°–ü–ò–ù", callback_data="spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ----- handlers -----
@bot.message_handler(commands=['start'])
def start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚Äî –∑–¥–µ—Å—å –≤—ã–∏–≥—Ä—ã—à–∏ –Ω–µ –∂–¥—É—Ç, –æ–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è! ‚ú®\n\n"
        f"–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:\n\n"
        f"üéÅ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã</b> ‚Äî –ø—Ä—è–º–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        f"üé∞ <b>–†–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∏–≥—Ä—ã</b> ‚Äî –∫–∞–∂–¥—ã–π —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π\n"
        f"üì≤ <b>–£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚Äî –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram: –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ\n\n"
        f"–ó–¥–µ—Å—å –Ω–µ—Ç –ª–∏—à–Ω–µ–π —Å—É–µ—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –∞–∑–∞—Ä—Ç, —Å—Ç–∏–ª—å –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∏–≥—Ä—ã.\n"
        f"–ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞—á—É! üåü"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb())

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data
    if data == "play":
        bot.edit_message_text(
            "üé∞ <b>–†–∞–∑–¥–µ–ª —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—Ä—É–∫—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É!\n"
            "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–æ–±—Ä–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ.\n\n"
            "üí° <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
            "‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–∞ ‚Üí –≤—ã–∏–≥—Ä—ã—à √ó2\n"
            "‚Ä¢ 3 –∑–≤–µ–∑–¥—ã ‚≠ê ‚Üí –≤—ã–∏–≥—Ä—ã—à √ó3\n"
            "‚Ä¢ 3 —Å–µ–º—ë—Ä–∫–∏ 7Ô∏è‚É£ ‚Üí –¥–∂–µ–∫–ø–æ—Ç √ó5\n"
            "‚Ä¢ –õ—é–±–∞—è –Ω–µ–ø–æ–ª–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è ‚Üí –≤—ã–∏–≥—Ä—ã—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            call.message.chat.id, call.message.message_id, reply_markup=roulette_kb()
        )
    elif data == "spin":
        spin_handler(call)
    elif data == "profile":
        uid = call.from_user.id
        bal = get_balance(uid)
        bot.edit_message_text(
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî <b>–í–∞—à ID:</b> {uid}\nüí∞ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {bal}‚≠êÔ∏è\n\n"
            f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å.\n"
            f"–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! ‚ú®üé∞",
            call.message.chat.id, call.message.message_id,
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        )
    elif data == "back_to_main":
        name = call.from_user.first_name or "–∏–≥—Ä–æ–∫"
        text = (
            f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚Äî –∑–¥–µ—Å—å –≤—ã–∏–≥—Ä—ã—à–∏ –Ω–µ –∂–¥—É—Ç, –æ–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è! ‚ú®\n\n"
            f"–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:\n\n"
            f"üéÅ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã</b> ‚Äî –ø—Ä—è–º–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
            f"üé∞ <b>–†–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∏–≥—Ä—ã</b> ‚Äî –∫–∞–∂–¥—ã–π —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π\n"
            f"üì≤ <b>–£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚Äî –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram: –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ\n\n"
            f"–ó–¥–µ—Å—å –Ω–µ—Ç –ª–∏—à–Ω–µ–π —Å—É–µ—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –∞–∑–∞—Ä—Ç, —Å—Ç–∏–ª—å –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∏–≥—Ä—ã.\n"
            f"–ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞—á—É! üåü"
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb())
    bot.answer_callback_query(call.id)

# ----- spin logic with animation, balance update and lock -----
def spin_handler(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if chat_id in spin_locks:
        bot.answer_callback_query(call.id, "–°–ø–∏–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=False)
        return

    bal = get_balance(user_id)
    bet = 1
    if bal < bet:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", show_alert=True)
        return

    spin_locks.add(chat_id)
    bot.answer_callback_query(call.id)
    threading.Thread(target=_run_spin, args=(call, user_id, bet)).start()

def _run_spin(call, user_id, bet):
    chat_id = call.message.chat.id
    msg_id = call.message.message_id
    try:
        bot.edit_message_text("‚Ä¶–ë–ê–†–ê–ë–ê–ù–´ –ö–†–£–¢–Ø–¢–°–Ø‚Ä¶ üé∞", chat_id, msg_id)

        frames = [spin_once() for _ in range(3)]
        for frame in frames:
            bot.edit_message_text(matrix_to_text(frame), chat_id, msg_id)
            time.sleep(0.6)

        final = spin_once()
        result, mult = eval_middle_row(final)

        bal = get_balance(user_id)
        bal -= bet
        if result != "lose":
            win = bet * mult
            bal += win
        set_balance(user_id, bal)

        text = make_result_text(final, result, mult, bal)
        bot.edit_message_text(text, chat_id, msg_id, reply_markup=result_kb())
    except Exception:
        try:
            bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–ø–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", chat_id, msg_id)
        except:
            pass
    finally:
        spin_locks.discard(chat_id)

if __name__ == "__main__":
    bot.infinity_polling()
