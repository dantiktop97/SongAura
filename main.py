import os
import asyncio
from yt_dlp import YoutubeDL
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

TOKEN = os.getenv("Song")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ Render

# ===================== YT-DLP =====================
YDL_OPTS = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'outtmpl': 'song.%(ext)s',
    'quiet': True,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
}

def download_from_rutube(url: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ —Å RuTube –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ –Ω–∞ –≤–∏–¥–µ–æ.
    """
    with YoutubeDL(YDL_OPTS) as ydl:
        info = ydl.extract_info(url, download=True)
        filename = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")
        return info, filename

# ===================== –ü–†–û–ì–†–ï–°–° =====================
def build_bar(steps: int) -> str:
    return f"{'‚úÖ' * steps}{'‚¨ú' * (10 - steps)} {steps*10}%"

async def progress_task(msg, query: str, done_event: asyncio.Event, step_delay: float = 0.5):
    last_text = ""
    for step in range(1, 11):
        if done_event.is_set():
            final_text = f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query}\n{build_bar(10)} ‚úÖ"
            if final_text != last_text:
                await msg.edit_text(final_text)
            return
        current_text = f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query}\n{build_bar(step)}"
        if current_text != last_text:
            await msg.edit_text(current_text)
            last_text = current_text
        await asyncio.sleep(step_delay)
    if not done_event.is_set():
        final_text = f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query}\n{build_bar(10)} ‚úÖ"
        if final_text != last_text:
            await msg.edit_text(final_text)

# ===================== –ú–ï–ù–Æ =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéµ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É", callback_data="search_help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(keyboard)

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SongAura ‚Äî —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram!\n"
        "üöÄ –Ø –º–æ–≥—É –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞—É–¥–∏–æ —Å RuTube –ø–æ —Å—Å—ã–ª–∫–µ.\n\n"
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "- /search <—Å—Å—ã–ª–∫–∞_–Ω–∞_RuTube> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ\n\n"
        "üéµ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
        "üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è!\n"
        "–ê–≤—Ç–æ—Ä: @SongAuraBot"
    )

# ===================== –ë–ï–ó–û–ü–ê–°–ù–û–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï =====================
async def safe_edit_message(query, text, reply_markup=None, parse_mode=None):
    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception:
        pass

# ===================== –ö–û–ú–ê–ù–î–´ =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(full_greeting(user_name), reply_markup=main_menu())

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /search <—Å—Å—ã–ª–∫–∞ –Ω–∞ RuTube> üéµ")
        return

    url = context.args[0]
    msg = await update.message.reply_text(f"üîç –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ —Å RuTube...\n{build_bar(0)}")
    done_event = asyncio.Event()
    progress = asyncio.create_task(progress_task(msg, url, done_event))

    try:
        info, file_name = await asyncio.to_thread(download_from_rutube, url)
        done_event.set()
        await progress

        await update.message.reply_audio(
            open(file_name, "rb"),
            title=info.get('title', '–ê—É–¥–∏–æ —Å RuTube'),
            caption="üé∂ –°–¥–µ–ª–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @SongAuraBot"
        )
        try:
            os.remove(file_name)
        except Exception:
            pass

    except Exception as e:
        done_event.set()
        if not progress.done():
            await progress
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_name = query.from_user.first_name or "–¥—Ä—É–≥"

    if query.data == "search_help":
        await safe_edit_message(
            query,
            "üéµ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:\n\n"
            "`/search —Å—Å—ã–ª–∫–∞_–Ω–∞_RuTube`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/search https://rutube.ru/video/xxxxxx`\n\n"
            "üí° –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ!",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )

    elif query.data == "about":
        await safe_edit_message(
            query,
            "‚ÑπÔ∏è *–û SongAura*\n\n"
            "üé∂ SongAura ‚Äî —ç—Ç–æ —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram!\n"
            "üöÄ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ —Å RuTube –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n"
            "–ê–≤—Ç–æ—Ä: @SongAuraBot\n"
            "üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è!",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )

    elif query.data == "back":
        await safe_edit_message(
            query,
            full_greeting(user_name),
            reply_markup=main_menu()
        )

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    # ===================== WEBHOOK =====================
    WEBHOOK_URL = "https://songaura.onrender.com/" + TOKEN  # –¢–≤–æ–π URL Render + —Ç–æ–∫–µ–Ω

    print("–ë–æ—Ç SongAura –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
