# main.py
import os
import random
import time
import json
import threading
import telebot
from flask import Flask, request, abort
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
TOKEN = os.getenv("STAR")   # —Å–µ–∫—Ä–µ—Ç STAR (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞)
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è STAR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

BALANCE_FILE = "balances.json"
balances_lock = threading.Lock()

# ----------------- –°–∏–º–≤–æ–ª—ã –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ -----------------
SYMBOLS = [
    ("üçí", 25),
    ("üçã", 25),
    ("üçâ", 20),
    ("‚≠ê", 15),
    ("7Ô∏è‚É£", 5),
]

# ----------------- –ë–∞–ª–∞–Ω—Å—ã (—Ñ–∞–π–ª) -----------------
def load_balances():
    try:
        with balances_lock:
            if not os.path.exists(BALANCE_FILE):
                return {}
            with open(BALANCE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception:
        return {}

def save_balances(balances):
    try:
        with balances_lock:
            with open(BALANCE_FILE, "w", encoding="utf-8") as f:
                json.dump(balances, f, ensure_ascii=False)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤:", e)

balances = load_balances()

def get_balance(user_id):
    with balances_lock:
        return int(balances.get(str(user_id), 1000))  # –¥–µ—Ñ–æ–ª—Ç 1000

def set_balance(user_id, value):
    with balances_lock:
        balances[str(user_id)] = int(value)
        save_balances(balances)

# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ (—Å–ª–æ—Ç) -----------------
def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", 5
        if s == "‚≠ê":
            return "star", 3
        return "fruit", 2
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} –º–æ–Ω–µ—Ç\n\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑, —É–¥–∞—á–∞ —Ä—è–¥–æ–º! ‚ú®üé∞"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —Å–æ–±—Ä–∞–ª–∏: {' '.join(mid)}\n\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} –º–æ–Ω–µ—Ç\n\n"
            f"–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! üçÄ"
        )

# ----------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----------------
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    return kb

def roulette_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéüÔ∏è –°–ü–ò–ù (1‚≠ê)", callback_data="spin_pay"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑ (1‚≠ê)", callback_data="spin_pay"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def profile_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ----------------- –¢–µ–∫—Å—Ç—ã (–≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω) -----------------
def welcome_text(name):
    return (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚Äî –∑–¥–µ—Å—å –≤—ã–∏–≥—Ä—ã—à–∏ –Ω–µ –∂–¥—É—Ç, –æ–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è! ‚ú®\n\n"
        f"–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:\n\n"
        f"üéÅ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã</b> ‚Äî –ø—Ä—è–º–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        f"üé∞ <b>–†–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∏–≥—Ä—ã</b> ‚Äî –∫–∞–∂–¥—ã–π —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π\n"
        f"üì≤ <b>–£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚Äî –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram: –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ\n\n"
        f"–ó–¥–µ—Å—å –Ω–µ—Ç –ª–∏—à–Ω–µ–π —Å—É–µ—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –∞–∑–∞—Ä—Ç, —Å—Ç–∏–ª—å –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∏–≥—Ä—ã.\n"
        f"–ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞—á—É! üåü"
    )

roulette_long_text = (
    "üé∞ <b>–†–∞–∑–¥–µ–ª —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—Ä—É–∫—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É!\n"
    "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–æ–±—Ä–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ.\n\n"
    "üí° <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
    "‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–∞ ‚Üí –≤—ã–∏–≥—Ä—ã—à √ó2\n"
    "‚Ä¢ 3 –∑–≤–µ–∑–¥—ã ‚≠ê ‚Üí –≤—ã–∏–≥—Ä—ã—à √ó3\n"
    "‚Ä¢ 3 —Å–µ–º—ë—Ä–∫–∏ 7Ô∏è‚É£ ‚Üí –¥–∂–µ–∫–ø–æ—Ç √ó5\n"
    "‚Ä¢ –õ—é–±–∞—è –Ω–µ–ø–æ–ª–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è ‚Üí –≤—ã–∏–≥—Ä—ã—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
    "–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–ø–∏–Ω–∞ ‚Äî <b>1‚≠ê</b> (Telegram Stars).\n"
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —É–≤–∏–¥–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é –±–∞—Ä–∞–±–∞–Ω–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –£–¥–∞—á–∏! üçÄ"
)

profile_long_text = (
    "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –±–∞–ª–∞–Ω—Å.\n\n"
)

# ----------------- –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ -----------------
@bot.message_handler(commands=['start'])
def start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    bot.send_message(message.chat.id, welcome_text(name), reply_markup=main_menu_kb(), parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "play")
def play(call):
    bot.edit_message_text(
        roulette_long_text,
        call.message.chat.id, call.message.message_id,
        reply_markup=roulette_kb(), parse_mode="HTML"
    )

# –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ (Stars)
@bot.callback_query_handler(func=lambda call: call.data == "spin_pay")
def spin_pay(call):
    prices = [LabeledPrice(label="–û–¥–∏–Ω —Å–ø–∏–Ω üé∞", amount=1)]  # 1 Star
    try:
        bot.send_invoice(
            call.message.chat.id,
            title="üé∞ –°–ø–∏–Ω",
            description="–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∑–∞ 1‚≠ê",
            invoice_payload="spin_slot",
            provider_token="",  # –¥–ª—è Stars –æ–±—ã—á–Ω–æ –ø—É—Å—Ç–æ/–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è BotFather (–∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
            currency="XTR",
            prices=prices
        )
    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: " + str(e), show_alert=True)
        return
    bot.answer_callback_query(call.id)

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query: PreCheckoutQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    # –ü—Ä–∏—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Telegram
    sp = message.successful_payment
    if not sp:
        return
    if sp.invoice_payload != "spin_slot":
        return
    user_id = message.from_user.id
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∏–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å webhook
    threading.Thread(target=do_spin, args=(message.chat.id, user_id)).start()

def do_spin(chat_id, user_id):
    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∞–Ω–∏–º–∞—Ü–∏—é
    try:
        msg = bot.send_message(chat_id, "‚Ä¶–ë–ê–†–ê–ë–ê–ù–´ –ö–†–£–¢–Ø–¢–°–Ø‚Ä¶ üé∞")
    except Exception:
        return

    # –ê–Ω–∏–º–∞—Ü–∏—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤)
    frames = [spin_once() for _ in range(3)]
    try:
        for frame in frames:
            bot.edit_message_text(matrix_to_text(frame), chat_id, msg.message_id)
            time.sleep(0.6)
    except Exception:
        pass

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final = spin_once()
    result, mult = eval_middle_row(final)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å: —Å–ø–∏—Å—ã–≤–∞–µ–º 1‚≠ê –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã)
    bet = 1
    bal = get_balance(user_id)
    bal -= bet
    if result != "lose":
        win = bet * mult
        bal += win
    set_balance(user_id, bal)

    text = make_result_text(final, result, mult, bal)
    try:
        bot.edit_message_text(text, chat_id, msg.message_id, reply_markup=result_kb(), parse_mode="HTML")
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id, text, reply_markup=result_kb(), parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile(call):
    uid = call.from_user.id
    bal = get_balance(uid)
    bot.edit_message_text(
        profile_long_text +
        f"\nüÜî <b>–í–∞—à ID:</b> {uid}\n"
        f"üí∞ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {bal}‚≠êÔ∏è\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å.\n"
        f"–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! ‚ú®üé∞",
        call.message.chat.id, call.message.message_id, reply_markup=profile_kb(), parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back(call):
    name = call.from_user.first_name or "–∏–≥—Ä–æ–∫"
    bot.edit_message_text(welcome_text(name), call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb(), parse_mode="HTML")

# ----------------- Flask webhook endpoint -----------------
@app.route("/" + TOKEN, methods=["POST"])
def webhook():
    if request.headers.get("content-type") != "application/json":
        abort(403)
    json_string = request.stream.read().decode("utf-8")
    try:
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞:", e)
    return "OK", 200

@app.route("/")
def index():
    return "StarryCasino –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# ----------------- –ó–∞–ø—É—Å–∫: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏ —Å—Ç–∞—Ä—Ç Flask -----------------
if __name__ == "__main__":
    # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è Render
    RENDER_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    PORT = int(os.getenv("PORT", "10000"))

    if RENDER_HOST:
        webhook_url = f"https://{RENDER_HOST}/{TOKEN}"
        try:
            bot.remove_webhook()
        except Exception:
            pass
        try:
            ok = bot.set_webhook(url=webhook_url)
            print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url, ok)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:", e)
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ BotFather/Telegram API.")
    else:
        print("RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook.")
        print("–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Render —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_HOSTNAME.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (Render –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ PORT)
    app.run(host="0.0.0.0", port=PORT)
