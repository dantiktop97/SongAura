# -*- coding: utf-8 -*-
import asyncio
import os
import logging
import sys
from telethon import TelegramClient, errors
from telethon.errors import FloodWaitError

# –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Render
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
SESSION = os.getenv("SESSION")

# –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ (–∏–∑ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
target_chats = [
    -1002163895139,
    -1001300573578,
    -1002094964873,
    -1002423716563,
    -1002768695068
]

# –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
message_text = """–•–û–ß–ï–®–¨ –ù–ê–ö–†–£–¢–ò–¢–¨ –ü–û–î–ü–ò–°–ß–ò–ö–û–í –ò–õ–ò –†–ï–ê–ö–¶–ò–ô‚ùì

‚úÖ–¢–û–ì–î–ê –¢–ï–ë–ï –ö –ù–ê–ú ‚úÖ

‚úÖ–ù–ê–ö–†–£–¢–ö–ê –ó–ê –†–ï–§–ï–†–ê–õ–û–í‚úÖ

üëáüëáüëá

üëâ  @Hshzgsbot (https://t.me/Hshzgsbot?start=7902738665)  üëà
"""

# –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É (15 –º–∏–Ω—É—Ç)
START_DELAY = 15 * 60
# –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã–µ —á–∞—Ç—ã
SEND_DELAY = 2

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

client = TelegramClient(SESSION, API_ID, API_HASH)

async def send_to_chat(chat_id: int, text: str):
    try:
        await client.send_message(chat_id, text)
        logging.info(f"‚úÖ Sent to chat {chat_id}")
    except FloodWaitError as e:
        logging.warning(f"FloodWait {e.seconds} sec for chat {chat_id}")
        await asyncio.sleep(e.seconds + 1)
        await send_to_chat(chat_id, text)
    except errors.RPCError as e:
        logging.error(f"RPC error for {chat_id}: {e}")
    except Exception as e:
        logging.exception(f"Unexpected error for {chat_id}: {e}")

async def main():
    await client.start()
    logging.info(f"‚úÖ Client authorized. Waiting {START_DELAY} sec before sending...")
    await asyncio.sleep(START_DELAY)

    for chat_id in target_chats:
        await send_to_chat(chat_id, message_text)
        await asyncio.sleep(SEND_DELAY)

    logging.info("‚úÖ All messages sent. Exiting.")

if __name__ == "__main__":
    try:
        client.loop.run_until_complete(main())
    except KeyboardInterrupt:
        logging.info("üõë Interrupted")
    finally:
        if client.is_connected():
            client.disconnect()
