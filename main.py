import os
import asyncio
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# ===================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====================
TOKEN = os.getenv("Song")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
VK_SERVICE_KEY = os.getenv("VK_KEY")  # –°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á VK
VK_API_VERSION = "5.131"

# ===================== –ú–µ–Ω—é =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéµ –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏", callback_data="search_help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(keyboard)

# ===================== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SongAura ‚Äî —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n"
        "üöÄ –ë—ã—Å—Ç—Ä–æ –∏—â–µ—Ç –ø–µ—Å–Ω–∏ –≤ VK –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏—Ö –ø—Ä—è–º–æ —Å—é–¥–∞.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "- /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "- /search —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "üéµ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π!"
    )

# ===================== –ü—Ä–æ–≥—Ä–µ—Å—Å =====================
def build_bar(steps: int) -> str:
    return f"{'‚úÖ'*steps}{'‚¨ú'*(10-steps)} {steps*10}%"

async def progress_task(msg, query: str, done_event: asyncio.Event, step_delay: float = 0.5):
    last_text = ""
    for step in range(1, 11):
        if done_event.is_set():
            final_text = f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query}\n{build_bar(10)} ‚úÖ"
            if final_text != last_text:
                await msg.edit_text(final_text)
            return
        current_text = f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query}\n{build_bar(step)}"
        if current_text != last_text:
            await msg.edit_text(current_text)
            last_text = current_text
        await asyncio.sleep(step_delay)
    if not done_event.is_set():
        final_text = f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query}\n{build_bar(10)} ‚úÖ"
        if final_text != last_text:
            await msg.edit_text(final_text)

# ===================== –ü–æ–∏—Å–∫ VK =====================
def search_vk_audio(query: str):
    url = "https://api.vk.com/method/audio.search"
    params = {
        "q": query,
        "count": 1,
        "access_token": VK_SERVICE_KEY,
        "v": VK_API_VERSION
    }
    resp = requests.get(url, params=params).json()
    if "error" in resp:
        raise Exception(resp["error"]["error_msg"])
    items = resp.get("response", {}).get("items", [])
    if not items:
        raise Exception("–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    track = items[0]
    return {
        "title": track.get("artist", "") + " - " + track.get("title", ""),
        "url": track.get("url")
    }

# ===================== –ö–æ–º–∞–Ω–¥—ã =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(full_greeting(user_name), reply_markup=main_menu())

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /search –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ üéµ")
        return

    query_text = " ".join(context.args)
    msg = await update.message.reply_text(f"üîç –ò—â—É –ø–µ—Å–Ω—é: {query_text}\n{build_bar(0)}")
    done_event = asyncio.Event()
    progress = asyncio.create_task(progress_task(msg, query_text, done_event))

    try:
        track = await asyncio.to_thread(search_vk_audio, query_text)
        done_event.set()
        await progress

        audio_resp = requests.get(track["url"])
        file_name = "song.mp3"
        with open(file_name, "wb") as f:
            f.write(audio_resp.content)

        await update.message.reply_audio(
            open(file_name, "rb"),
            title=track["title"],
            caption="üé∂ SongAura"
        )
        os.remove(file_name)
        await msg.delete()
    except Exception as e:
        done_event.set()
        if not progress.done():
            await progress
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ===================== –ö–Ω–æ–ø–∫–∏ =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_name = query.from_user.first_name or "–¥—Ä—É–≥"

    if query.data == "search_help":
        await query.edit_message_text(
            "üéµ –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n\n"
            "`/search –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–µ—Å–Ω–∏`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/search –¢—ã –ø–æ—Ö–æ–∂ –Ω–∞ –∫–æ—Ç–∞`\n\n"
            "üí° –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫.",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )
    elif query.data == "about":
        await query.edit_message_text(
            "‚ÑπÔ∏è *–û SongAura*\n\n"
            "üé∂ SongAura ‚Äî —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n"
            "üöÄ –ë—ã—Å—Ç—Ä–æ –∏—â–µ—Ç –ø–µ—Å–Ω–∏ –≤ VK.\n\n"
            "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "- /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "- /search —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é\n\n"
            "–ê–≤—Ç–æ—Ä: @SongAuraBot",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )
    elif query.data == "back":
        await query.edit_message_text(full_greeting(user_name), reply_markup=main_menu())

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("–ë–æ—Ç SongAura –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
