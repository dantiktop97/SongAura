import os
import random
import time
import json
import threading
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery

TOKEN = os.getenv("STAR")   # —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ (—Å–µ–∫—Ä–µ—Ç STAR)
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

BALANCE_FILE = "balances.json"
spin_locks = set()

SYMBOLS = [
    ("üçí", 25),
    ("üçã", 25),
    ("üçâ", 20),
    ("‚≠ê", 15),
    ("7Ô∏è‚É£", 5),
]

def load_balances():
    try:
        with open(BALANCE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_balances(balances):
    with open(BALANCE_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f)

balances = load_balances()

def get_balance(user_id):
    return int(balances.get(str(user_id), 1000))

def set_balance(user_id, value):
    balances[str(user_id)] = int(value)
    save_balances(balances)

def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", 5
        if s == "‚≠ê":
            return "star", 3
        return "fruit", 2
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} –º–æ–Ω–µ—Ç\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑, —É–¥–∞—á–∞ —Ä—è–¥–æ–º! ‚ú®üé∞"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —Å–æ–±—Ä–∞–ª–∏: {' '.join(mid)}\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} –º–æ–Ω–µ—Ç\n"
            f"–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! üçÄ"
        )

# ---- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    return kb

def roulette_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéüÔ∏è –°–ü–ò–ù (1‚≠ê)", callback_data="spin_pay"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑ (1‚≠ê)", callback_data="spin_pay"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ---- /start ----
@bot.message_handler(commands=['start'])
def start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚ú®\n\n"
        f"–ñ–º–∏ ¬´–ò–ì–†–ê–¢–¨¬ª –∏ –ø—Ä–æ–±—É–π —É–¥–∞—á—É üé∞"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb())

# ---- play ----
@bot.callback_query_handler(func=lambda call: call.data == "play")
def play(call):
    bot.edit_message_text(
        "üé∞ <b>–§—Ä—É–∫—Ç–æ–≤–∞—è —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
        "‚Ä¢ 3 —Ñ—Ä—É–∫—Ç–∞ ‚Üí √ó2\n"
        "‚Ä¢ 3 ‚≠ê ‚Üí √ó3\n"
        "‚Ä¢ 3 7Ô∏è‚É£ ‚Üí √ó5\n"
        "‚Ä¢ –∏–Ω–∞—á–µ ‚Üí –ø—Ä–æ–∏–≥—Ä—ã—à",
        call.message.chat.id, call.message.message_id, reply_markup=roulette_kb(), parse_mode="HTML"
    )

# ---- –æ–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ ----
@bot.callback_query_handler(func=lambda call: call.data == "spin_pay")
def spin_pay(call):
    prices = [LabeledPrice(label="–û–¥–∏–Ω —Å–ø–∏–Ω üé∞", amount=1)]  # 1‚≠ê
    bot.send_invoice(
        call.message.chat.id,
        title="üé∞ –°–ø–∏–Ω",
        description="–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∑–∞ 1‚≠ê",
        invoice_payload="spin_slot",
        provider_token="",  # –¥–ª—è Stars –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
        currency="XTR",
        prices=prices
    )
    bot.answer_callback_query(call.id)

# ---- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ----
@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query: PreCheckoutQuery):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# ---- —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ----
@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    if message.successful_payment.invoice_payload != "spin_slot":
        return
    user_id = message.from_user.id
    threading.Thread(target=do_spin, args=(message.chat.id, user_id)).start()

# ---- –ª–æ–≥–∏–∫–∞ —Å–ø–∏–Ω–∞ ----
def do_spin(chat_id, user_id):
    msg = bot.send_message(chat_id, "‚Ä¶–ë–ê–†–ê–ë–ê–ù–´ –ö–†–£–¢–Ø–¢–°–Ø‚Ä¶ üé∞")

    frames = [spin_once() for _ in range(3)]
    for frame in frames:
        bot.edit_message_text(matrix_to_text(frame), chat_id, msg.message_id)
        time.sleep(0.6)

    final = spin_once()
    result, mult = eval_middle_row(final)

    bal = get_balance(user_id)
    # —Å–ø–∏—Å–∞–Ω–∏–µ 1‚≠ê
    bet = 1
    bal -= bet
    if result != "lose":
        win = bet * mult
        bal += win
    set_balance(user_id, bal)

    text = make_result_text(final, result, mult, bal)
    bot.edit_message_text(text, chat_id, msg.message_id, reply_markup=result_kb(), parse_mode="HTML")

# ---- –ø—Ä–æ—Ñ–∏–ª—å ----
@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile(call):
    uid = call.from_user.id
    bal = get_balance(uid)
    bot.edit_message_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: {uid}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal}‚≠êÔ∏è",
        call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb(), parse_mode="HTML"
    )

# ---- –Ω–∞–∑–∞–¥ ----
@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back(call):
    name = call.from_user.first_name or "–∏–≥—Ä–æ–∫"
    bot.edit_message_text(
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚ú®",
        call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb(), parse_mode="HTML"
    )

if __name__ == "__main__":
    bot.infinity_polling()
