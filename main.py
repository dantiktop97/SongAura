# send_in_15min.py
import os
import asyncio
import random
from datetime import datetime
from telethon import TelegramClient, errors
from telethon.tl.types import InputPeerChannel

# –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render
SESSION = os.environ.get("SESSION")        # string session
API_ID = int(os.environ.get("API_ID", "0"))
API_HASH = os.environ.get("API_HASH", "")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))

# –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
target_chats = [
    -1002163895139,
    -1001300573578,
    -1002094964873,
    -1002423716563,
    -1002768695068
]

message_text = """
–•–û–ß–ï–®–¨ –ù–ê–ö–†–£–¢–ò–¢–¨ –ü–û–î–ü–ò–°–ß–ò–ö–û–í –ò–õ–ò –†–ï–ê–ö–¶–ò–ô‚ùì

‚úÖ–¢–û–ì–î–ê –¢–ï–ë–ï –ö –ù–ê–ú ‚úÖ

‚úÖ–ù–ê–ö–†–£–¢–ö–ê –ó–ê –†–ï–§–ï–†–ê–õ–û–í‚úÖ

          üëáüëáüëá

üëâ  @Hshzgsbot (https://t.me/Hshzgsbot?start=7902738665)  üëà
"""

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
BATCH_SIZE = 1               # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —á–∞—Ç—É –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
MIN_DELAY = 2.0              # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_DELAY = 5.0              # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
PAUSE_BETWEEN_BATCHES = 3.0  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
START_DELAY_SECONDS = 15 * 60  # –∂–¥–∞—Ç—å 15 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π

client = TelegramClient(SESSION, API_ID, API_HASH)

async def safe_send(chat_id: int, text: str) -> bool:
    try:
        await client.send_message(chat_id, text)
        return True
    except errors.FloodWaitError as e:
        wait = e.seconds + 1
        await asyncio.sleep(wait)
        try:
            await client.send_message(chat_id, text)
            return True
        except Exception:
            return False
    except (errors.UserIsBlockedError, errors.InputUserDeactivatedError, errors.ChatWriteForbiddenError):
        return False
    except Exception:
        return False

async def send_all():
    success = 0
    fail = 0
    # –∂–¥–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è
    start_at = datetime.utcnow() + timedelta(seconds=START_DELAY_SECONDS)
    await client.send_message(ADMIN_ID, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {start_at.isoformat()} UTC")
    await asyncio.sleep(START_DELAY_SECONDS)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á–∞—Ö
    for i in range(0, len(target_chats), BATCH_SIZE):
        batch = target_chats[i:i+BATCH_SIZE]
        for chat_id in batch:
            ok = await safe_send(chat_id, message_text)
            if ok:
                success += 1
            else:
                fail += 1
            await asyncio.sleep(random.uniform(MIN_DELAY, MAX_DELAY))
        await asyncio.sleep(PAUSE_BETWEEN_BATCHES)
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await client.send_message(ADMIN_ID, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö: {success}, –û—à–∏–±–∫–∏: {fail}")
    except Exception:
        pass

from datetime import timedelta

async def main():
    await client.start()
    await send_all()
    await client.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
