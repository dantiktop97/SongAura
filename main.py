import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

TOKEN = os.getenv("Song")  # –°–µ–∫—Ä–µ—Ç Render

# ===================== –¶–ò–¢–ê–¢–´ –ò –Æ–ú–û–† =====================
quotes = [f"–¶–∏—Ç–∞—Ç–∞ #{i}: –ü—Ä–∏–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã {i}" for i in range(1, 100001)]
jokes = [f"–®—É—Ç–∫–∞ #{i}: –ü—Ä–∏–º–µ—Ä —à—É—Ç–∫–∏ {i}" for i in range(1, 10001)]

used_quotes = set()
used_jokes = set()
last_users = []  # –î–ª—è –∞–¥–º–∏–Ω –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)

ADMIN_ID = 6525179440  # ID @danyadz

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("üòÇ –Æ–º–æ—Ä", callback_data="humor")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]])

def quote_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def joke_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –ï—â—ë –æ–¥–Ω–∞ —à—É—Ç–∫–∞", callback_data="humor")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def admin_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="last_users")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuotesAuraBot ‚Äî —Ü–∏—Ç–∞—Ç—ã –∏ —é–º–æ—Ä –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤!\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
        "- /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "- –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ —à—É—Ç–∫–∞"
    )

# ===================== –§–£–ù–ö–¶–ò–ò –¶–ò–¢–ê–¢/–Æ–ú–û–† =====================
def get_random_quote() -> str:
    global used_quotes
    available = list(set(quotes) - used_quotes)
    if not available:
        used_quotes.clear()
        available = list(quotes)
    quote = random.choice(available)
    used_quotes.add(quote)
    return quote

def get_random_joke() -> str:
    global used_jokes
    available = list(set(jokes) - used_jokes)
    if not available:
        used_jokes.clear()
        available = list(jokes)
    joke = random.choice(available)
    used_jokes.add(joke)
    return joke

# ===================== –ö–û–ú–ê–ù–î–´ =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_name = user.first_name or "–¥—Ä—É–≥"
    if user.username and user.username not in last_users:
        last_users.append(user.username)
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    keyboard = main_menu().inline_keyboard
    if user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin")])
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(full_greeting(user_name), reply_markup=markup)

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_name = user.first_name or "–¥—Ä—É–≥"

    # ==================== –¶–ò–¢–ê–¢–ê ====================
    if query.data == "random_quote":
        text = f"üí¨ {get_random_quote()}"
        markup = quote_menu()
        if query.message.text != text:  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É "Message is not modified"
            await query.edit_message_text(text=text, reply_markup=markup)

    # ==================== –Æ–ú–û–† ====================
    elif query.data == "humor":
        text = f"üòÇ {get_random_joke()}"
        markup = joke_menu()
        if query.message.text != text:
            await query.edit_message_text(text=text, reply_markup=markup)

    # ==================== –û –ë–û–¢–ï ====================
    elif query.data == "about":
        text = (
            "‚ÑπÔ∏è *–û QuotesAuraBot*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ü–∏—Ç–∞—Ç—ã –∏ —é–º–æ—Ä.\n"
            "üéâ –¶–∏—Ç–∞—Ç—ã –∏ —à—É—Ç–∫–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–æ –ø–æ–ª–Ω–æ–≥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è.\n"
            "üí° –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∏ –¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!"
        )
        if query.message.text != text:
            await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=back_menu())

    # ==================== –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î ====================
    elif query.data == "back":
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        keyboard = main_menu().inline_keyboard
        if user.id == ADMIN_ID:
            keyboard.append([InlineKeyboardButton("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin")])
        markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(full_greeting(user_name), reply_markup=markup)

    # ==================== –ú–ï–ù–Æ –ê–î–ú–ò–ù–ê ====================
    elif query.data == "admin":
        if user.id != ADMIN_ID:
            return  # –ù–∏–∫—Ç–æ –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞ –Ω–µ –≤–∏–¥–∏—Ç
        await query.edit_message_text("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", reply_markup=admin_menu())

    elif query.data == "last_users":
        if user.id != ADMIN_ID:
            return
        if last_users:
            text = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(last_users[-10:])
        else:
            text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö."
        await query.edit_message_text(text=text, reply_markup=admin_menu())

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("QuotesAuraBot –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
