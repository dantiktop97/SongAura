import os
import random
import time
import json
import threading
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = os.getenv("STAR")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "")  # —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–ª–∞—Ç)
SPIN_PRICE_AMOUNT = int(os.getenv("SPIN_PRICE_AMOUNT", "100"))  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 100 = 1.00 RUB)
CURRENCY = os.getenv("CURRENCY", "RUB")

if not TOKEN:
    raise SystemExit("–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è STAR")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# ====== –§–∞–π–ª—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ======
BALANCE_FILE = "balances.json"
spin_locks = set()  # —á–∞—Ç–æ–≤—ã–µ –ª–æ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤
pending_spin_invoice = {}  # user_id -> {"chat_id": int, "msg_id": int}

# ====== –°–∏–º–≤–æ–ª—ã –∏ —à–∞–Ω—Å—ã ======
SYMBOLS = [
    ("üçí", 25),
    ("üçã", 25),
    ("üçâ", 20),
    ("‚≠ê", 15),
    ("7Ô∏è‚É£", 5),
]

# ====== –ë–∞–ª–∞–Ω—Å: –∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ======
def load_balances():
    try:
        with open(BALANCE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_balances(balances):
    with open(BALANCE_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f)

balances = load_balances()

def get_balance(user_id):
    return int(balances.get(str(user_id), 0))

def set_balance(user_id, value):
    balances[str(user_id)] = int(value)
    save_balances(balances)

def add_balance(user_id, delta):
    balances[str(user_id)] = get_balance(user_id) + int(delta)
    save_balances(balances)

# ====== –†—É–ª–µ—Ç–∫–∞: —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏ –æ—Ü–µ–Ω–∫–∞ ======
def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", 5
        if s == "‚≠ê":
            return "star", 3
        return "fruit", 2
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑, —É–¥–∞—á–∞ —Ä—è–¥–æ–º! ‚ú®üé∞"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —Å–æ–±—Ä–∞–ª–∏: {' '.join(mid)}\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è\n"
            f"–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! üçÄ"
        )

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ) ======
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    return kb

def roulette_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéüÔ∏è –°–ü–ò–ù", callback_data="spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def profile_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã: —Å—Ç–∞—Ä—Ç –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ======
try:
    bot.remove_webhook()
except Exception:
    pass

@bot.message_handler(commands=['start'])
def start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b> ‚Äî –∑–¥–µ—Å—å –≤—ã–∏–≥—Ä—ã—à–∏ –Ω–µ –∂–¥—É—Ç, –æ–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è! ‚ú®\n\n"
        f"–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:\n\n"
        f"üéÅ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã</b> ‚Äî –ø—Ä—è–º–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        f"üé∞ <b>–†–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∏–≥—Ä—ã</b> ‚Äî –∫–∞–∂–¥—ã–π —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π\n"
        f"üì≤ <b>–£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚Äî –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram: –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ\n\n"
        f"–ó–¥–µ—Å—å –Ω–µ—Ç –ª–∏—à–Ω–µ–π —Å—É–µ—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –∞–∑–∞—Ä—Ç, —Å—Ç–∏–ª—å –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∏–≥—Ä—ã.\n"
        f"–ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞—á—É! üåü"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb(), parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "play")
def play(call):
    bot.edit_message_text(
        "üé∞ <b>–†–∞–∑–¥–µ–ª —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ—Ä—É–∫—Ç–æ–≤—É—é —Ä—É–ª–µ—Ç–∫—É!\n"
        "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–æ–±—Ä–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ.\n\n"
        "üí° <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
        "‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–∞ ‚Üí –≤—ã–∏–≥—Ä—ã—à √ó2\n"
        "‚Ä¢ 3 –∑–≤–µ–∑–¥—ã ‚≠ê ‚Üí –≤—ã–∏–≥—Ä—ã—à √ó3\n"
        "‚Ä¢ 3 —Å–µ–º—ë—Ä–∫–∏ 7Ô∏è‚É£ ‚Üí –¥–∂–µ–∫–ø–æ—Ç √ó5\n"
        "‚Ä¢ –õ—é–±–∞—è –Ω–µ–ø–æ–ª–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è ‚Üí –≤—ã–∏–≥—Ä—ã—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
        call.message.chat.id, call.message.message_id, reply_markup=roulette_kb(), parse_mode="HTML"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile(call):
    uid = call.from_user.id
    bal = get_balance(uid)
    bot.edit_message_text(
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî <b>–í–∞—à ID:</b> {uid}\n"
        f"üí∞ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {bal} ‚≠êÔ∏è\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å.\n"
        f"–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ª–æ–≤–∏—Ç–µ —É–¥–∞—á—É! ‚ú®üé∞",
        call.message.chat.id, call.message.message_id, reply_markup=profile_kb(), parse_mode="HTML"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back(call):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω, —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç —á—Ç–æ –≤ /start
    start(call.message)
    bot.answer_callback_query(call.id)

# ====== SPIN: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ ======
@bot.callback_query_handler(func=lambda call: call.data == "spin")
def spin_invoice_handler(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if chat_id in spin_locks:
        bot.answer_callback_query(call.id, "–°–ø–∏–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=False)
        return

    # –ó–∞–≥–ª—É—à–∫–∞ –ø–µ—Ä–µ–¥ –∏–Ω–≤–æ–π—Å–æ–º (–≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)
    sent = bot.send_message(chat_id, "üé∞ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞—Ä–∞–±–∞–Ω–æ–≤...\nüí≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã‚Ä¶")
    pending_spin_invoice[user_id] = {"chat_id": sent.chat.id, "msg_id": sent.message_id}

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–≤–æ–π—Å: –∑–∞–≥–æ–ª–æ–≤–æ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ/–º–µ—Ç–∫–∞ —Ü–µ–Ω—ã –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
    prices = [LabeledPrice(label="‚òÖ1", amount=SPIN_PRICE_AMOUNT)]
    payload = f"spin:{user_id}"
    bot.send_invoice(
        chat_id=chat_id,
        title="–ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–æ–≤",
        description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–æ—Ç –º–∞—à–∏–Ω—É",
        payload=payload,
        provider_token=PROVIDER_TOKEN,  # –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –ø—Ä–æ–π–¥—É—Ç –±–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        currency=CURRENCY,
        prices=prices
    )
    bot.answer_callback_query(call.id)

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ ======
@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    sp = message.successful_payment
    payload = (sp.invoice_payload or "")
    user_id = message.from_user.id

    # –ï—Å–ª–∏ payload - –Ω–µ –Ω–∞—à —Å–ø–∏–Ω, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
    if not payload.startswith("spin:"):
        bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–ø–∞—Å–∏–±–æ.")
        return

    # –ù–∞–π—Ç–∏ –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    pending = pending_spin_invoice.pop(user_id, None)
    if pending:
        chat_id = pending["chat_id"]
        msg_id = pending["msg_id"]
    else:
        sent = bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é —Å–ø–∏–Ω...")
        chat_id = sent.chat.id
        msg_id = sent.message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=_run_spin_animation_after_payment, args=(chat_id, msg_id, user_id)).start()

def _run_spin_animation_after_payment(chat_id, msg_id, user_id):
    try:
        spin_locks.add(chat_id)
        # –ö–∞–¥—Ä—ã –∫—Ä—É—á–µ–Ω–∏—è
        frames = [spin_once() for _ in range(4)]
        for frame in frames[:-1]:
            bot.edit_message_text(matrix_to_text(frame) + "\n\nüé∞ –ö—Ä—É—Ç–∏—Ç—Å—è...", chat_id, msg_id)
            time.sleep(0.6)
        # –§–∏–Ω–∞–ª
        final = spin_once()
        result, mult = eval_middle_row(final)

        # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (–æ–ø–ª–∞—Ç–∞ —Å–ø–∏–Ω–∞ –±—ã–ª–∞ –≤–Ω–µ—à–Ω–µ–π —á–µ—Ä–µ–∑ Telegram)
        if result != "lose":
            win = 1 * mult
            add_balance(user_id, win)

        new_bal = get_balance(user_id)
        text = make_result_text(final, result, mult, new_bal)
        bot.edit_message_text(text, chat_id, msg_id, reply_markup=result_kb(), parse_mode="HTML")
    except Exception:
        try:
            bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ø–∏–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", chat_id, msg_id)
        except:
            pass
    finally:
        spin_locks.discard(chat_id)

# ====== –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–∏–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑" ======
# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç callback "spin" –∏ –≤–µ—Å—å —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è (–∏–Ω–≤–æ–π—Å -> –æ–ø–ª–∞—Ç–∞ -> –∞–Ω–∏–º–∞—Ü–∏—è)

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
if __name__ == "__main__":
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        pass
    except Exception as e:
        print("Polling stopped:", e)
