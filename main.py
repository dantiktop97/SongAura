import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes
)

# ===================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====================
TOKEN = os.getenv("Song")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_NAME = "@QuotesAuraBot"

QUOTE_CATEGORIES = {
    "–ú–æ—Ç–∏–≤–∞—Ü–∏—è": [
        "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.",
        "–°–º–µ–ª–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö—É, –∞ –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–∞—Ö–∞.",
        "–£—á–∏—Å—å –Ω–∞ –æ—à–∏–±–∫–∞—Ö –¥—Ä—É–≥–∏—Ö. –¢—ã –Ω–µ —Å–º–æ–∂–µ—à—å –ø—Ä–æ–∂–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∏—Ö –≤—Å–µ —Å–∞–º."
    ],
    "–ñ–∏–∑–Ω—å": [
        "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã. ‚Äî –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
        "–°—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç–æ, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å, —á—Ç–æ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å, –∏ —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å, —Å–æ–≤–ø–∞–¥–∞–µ—Ç. ‚Äî –ú–∞—Ö–∞—Ç–º–∞ –ì–∞–Ω–¥–∏"
    ],
    "–Æ–º–æ—Ä": [
        "–ñ–∏–∑–Ω—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞, —á—Ç–æ–±—ã —Ç—Ä–∞—Ç–∏—Ç—å –µ—ë –Ω–∞ –ø–ª–æ—Ö–∏–µ —à—É—Ç–∫–∏.",
        "–ï—Å–ª–∏ –∂–∏–∑–Ω—å –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏–º–æ–Ω—ã ‚Äî –¥–µ–ª–∞–π –ª–∏–º–æ–Ω–∞–¥ –∏ –ø—Ä–æ–¥–∞–π –µ–≥–æ —Å –ø—Ä–∏–±—ã–ª—å—é!"
    ]
}

# ===================== –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è =====================
user_queues = {}  # {user_id: {category: [—Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞]}}
user_history = {} # {user_id: [–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–∏—Ç–∞—Ç]}

# ===================== –ú–µ–Ω—é =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random")],
        [InlineKeyboardButton("üìÇ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="categories")],
        [InlineKeyboardButton("üìù –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã", callback_data="history")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]])

# ===================== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        f"üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME} ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏!\n"
        "üöÄ –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã, –∏–ª–∏ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n"
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "- –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫–∞–∂—É –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ü–∏—Ç–∞—Ç—É.\n"
        "- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏ –ø–æ–ª—É—á–∞–π —Ü–∏—Ç–∞—Ç—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
        "- –ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã ‚Äî –±—ã—Å—Ç—Ä–æ –≤—Å–ø–æ–º–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã.\n\n"
        "üéâ –ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –≤—ã–±—Ä–∞–≤ –æ–ø—Ü–∏—é –Ω–∏–∂–µ!"
    )

# ===================== –¶–∏—Ç–∞—Ç–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ =====================
def get_unique_quote(user_id, category=None):
    if user_id not in user_queues:
        user_queues[user_id] = {}
    if user_id not in user_history:
        user_history[user_id] = []

    if category:
        if category not in user_queues[user_id] or not user_queues[user_id][category]:
            user_queues[user_id][category] = QUOTE_CATEGORIES[category].copy()
            random.shuffle(user_queues[user_id][category])
        quote = user_queues[user_id][category].pop()
    else:
        chosen_cat = random.choice(list(QUOTE_CATEGORIES.keys()))
        quote = get_unique_quote(user_id, chosen_cat)
        return quote

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history[user_id].append(quote)
    if len(user_history[user_id]) > 5:
        user_history[user_id].pop(0)

    return quote

# ===================== –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ =====================
async def safe_edit_message(query, text, reply_markup=None, parse_mode=None):
    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception:
        pass

# ===================== –ö–Ω–æ–ø–∫–∏ =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_name = query.from_user.first_name or "–¥—Ä—É–≥"
    user_id = query.from_user.id

    if query.data == "random":
        quote = get_unique_quote(user_id)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéØ –ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="random")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
        ])
        await safe_edit_message(query, f"üéØ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞:\n\n{quote}", reply_markup=keyboard)

    elif query.data == "categories":
        keyboard = [[InlineKeyboardButton(name, callback_data=f"cat_{name}")] for name in QUOTE_CATEGORIES.keys()]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")])
        await safe_edit_message(query, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("cat_"):
        category = query.data.replace("cat_", "")
        quote = get_unique_quote(user_id, category)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéØ –ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data=f"cat_{category}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
        ])
        await safe_edit_message(query, f"üìÇ {category}:\n\n{quote}", reply_markup=keyboard)

    elif query.data == "history":
        quotes = user_history.get(user_id, [])
        if not quotes:
            text = "üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ü–∏—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏."
        else:
            text = "üìù –¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:\n\n" + "\n\n".join(quotes)
        await safe_edit_message(query, text, reply_markup=back_menu())

    elif query.data == "about":
        await safe_edit_message(
            query,
            f"‚ÑπÔ∏è *–û {BOT_NAME}*\n\n"
            "üí° QuoteAura ‚Äî —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–±—è —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π.\n"
            "üéØ –°–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã, –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ inline —Ä–µ–∂–∏–º.\n\n"
            "–ê–≤—Ç–æ—Ä: @QuotesAuraBot",
            parse_mode="Markdown",
            reply_markup=back_menu()
        )

    elif query.data == "back":
        await safe_edit_message(query, full_greeting(user_name), reply_markup=main_menu())

# ===================== –ö–æ–º–∞–Ω–¥—ã =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(full_greeting(user_name), reply_markup=main_menu())

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    print(f"{BOT_NAME} –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
