import os
import random
import time
import json
import threading
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice

TOKEN = os.getenv("STAR")
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# —É–±—Ä–∞—Ç—å webhook, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ 409 –ø—Ä–∏ polling
try:
    bot.remove_webhook()
except Exception:
    pass

BALANCE_FILE = "balances.json"
spin_locks = set()
pending_spin_invoice = {}  # user_id -> {"chat_id": int, "msg_id": int, "type": "spin_pay" or None}

SYMBOLS = [
    ("üçí", 25),
    ("üçã", 25),
    ("üçâ", 20),
    ("‚≠ê", 15),
    ("7Ô∏è‚É£", 5),
]

# ----- balances -----
def load_balances():
    try:
        with open(BALANCE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_balances(balances):
    with open(BALANCE_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f)

balances = load_balances()

def get_balance(user_id):
    return int(balances.get(str(user_id), 0))

def set_balance(user_id, value):
    balances[str(user_id)] = int(value)
    save_balances(balances)

def add_balance(user_id, delta):
    balances[str(user_id)] = int(balances.get(str(user_id), 0)) + int(delta)
    save_balances(balances)

# ----- utilities -----
def weighted_choice(symbols):
    items, weights = zip(*symbols)
    return random.choices(items, weights=weights, k=1)[0]

def spin_once():
    return [[weighted_choice(SYMBOLS) for _ in range(3)] for _ in range(3)]

def eval_middle_row(matrix):
    mid = matrix[1]
    if mid[0] == mid[1] == mid[2]:
        s = mid[0]
        if s == "7Ô∏è‚É£":
            return "jackpot", 5
        if s == "‚≠ê":
            return "star", 3
        return "fruit", 2
    return "lose", 0

def matrix_to_text(matrix):
    return "\n".join("| " + " | ".join(row) + " |" for row in matrix)

def make_result_text(matrix, result, mult, new_balance):
    mid = matrix[1]
    if result == "lose":
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"‚ùå <b>–£–≤—ã‚Ä¶ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞.</b>\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è"
        )
    else:
        return (
            f"{matrix_to_text(matrix)}\n\n"
            f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –í—ã —Å–æ–±—Ä–∞–ª–∏: {' '.join(mid)}\n"
            f"‚ú® <b>–í—ã–∏–≥—Ä—ã—à:</b> √ó{mult}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {new_balance} ‚≠êÔ∏è"
        )

# ----- keyboards -----
def main_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üé∞ –ò–ì–†–ê–¢–¨", callback_data="play"))
    kb.add(InlineKeyboardButton("üë§ –ü–†–û–§–ò–õ–¨", callback_data="profile"))
    kb.add(InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å 1 ‚≠êÔ∏è", callback_data="buy_star"))
    return kb

def roulette_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéüÔ∏è –°–ü–ò–ù (1 ‚≠êÔ∏è)", callback_data="spin"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

def result_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="spin"))
    kb.add(InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å 1 ‚≠êÔ∏è", callback_data="buy_star"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

# ----- handlers -----
@bot.message_handler(commands=['start'])
def start(message):
    name = message.from_user.first_name or "–∏–≥—Ä–æ–∫"
    text = (
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b>!\n\n"
        f"–ù–∞–∂–º–∏ –ò–ì–†–ê–¢–¨ ‚Üí –°–ü–ò–ù (—Å—Ç–æ–∏—Ç 1 ‚≠êÔ∏è) –∏–ª–∏ –∫—É–ø–∏ ‚≠êÔ∏è –ø—Ä—è–º–æ –∑–¥–µ—Å—å."
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb())

@bot.message_handler(commands=['balance'])
def cmd_balance(message):
    bal = get_balance(message.from_user.id)
    bot.send_message(message.chat.id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} ‚≠êÔ∏è")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data
    if data == "play":
        bot.edit_message_text(
            "üé∞ <b>–†–∞–∑–¥–µ–ª —Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
            "–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–æ–±—Ä–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–∏–Ω–∞: <b>1 ‚≠êÔ∏è</b>",
            call.message.chat.id, call.message.message_id, reply_markup=roulette_kb()
        )
    elif data == "spin":
        spin_handler(call)
    elif data == "buy_star":
        buy_star_handler(call)
    elif data == "profile":
        uid = call.from_user.id
        bal = get_balance(uid)
        bot.edit_message_text(
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî <b>–í–∞—à ID:</b> {uid}\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {bal} ‚≠êÔ∏è",
            call.message.chat.id, call.message.message_id,
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        )
    elif data == "back_to_main":
        name = call.from_user.first_name or "–∏–≥—Ä–æ–∫"
        text = (
            f"‚ú® –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>StarryCasino</b>!\n\n"
            f"–ù–∞–∂–º–∏ –ò–ì–†–ê–¢–¨ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=main_menu_kb())
    bot.answer_callback_query(call.id)

# ----- buy star (invoice) -----
def buy_star_handler(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    # –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É, –∑–∞–ø–æ–º–Ω–∏–º –º–µ—Å—Ç–æ, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏–º –∏–Ω–≤–æ–π—Å
    sent = bot.send_message(chat_id, "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã 1 ‚≠êÔ∏è‚Ä¶ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è.")
    pending_spin_invoice[user_id] = {"chat_id": sent.chat.id, "msg_id": sent.message_id, "type": "buy_star"}
    amount = 100  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä –∫–æ–ø–µ–π–∫–∏). –ù–∞—Å—Ç—Ä–æ–π –ø–æ —Å–≤–æ–µ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
    prices = [LabeledPrice(label="1 ‚≠êÔ∏è", amount=amount)]
    payload = f"buy:1"  # —Ñ–æ—Ä–º–∞—Ç: buy:<amount_stars>
    # provider_token –æ—Å—Ç–∞–≤–ª–µ–Ω –ø—É—Å—Ç—ã–º –ø–æ —É—Å–ª–æ–≤–∏—é (—Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –ø—Ä–æ–π–¥—É—Ç)
    bot.send_invoice(chat_id, title="–ü–æ–∫—É–ø–∫–∞ 1 ‚≠êÔ∏è", description="–ü–æ–∫—É–ø–∫–∞ 1 –∑–≤–µ–∑–¥—ã –¥–ª—è —Å–ø–∏–Ω–æ–≤", payload=payload,
                     provider_token="", currency="RUB", prices=prices)

# ----- spin flow -----
def spin_handler(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if chat_id in spin_locks:
        bot.answer_callback_query(call.id, "–°–ø–∏–Ω —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=False)
        return

    bal = get_balance(user_id)
    bet = 1
    if bal < bet:
        # –µ—Å–ª–∏ –Ω–µ—Ç –∑–≤—ë–∑–¥ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ–ø–ª–∞—Ç–∏—Ç—å —Å–ø–∏–Ω –Ω–∞–ø—Ä—è–º—É—é (–∏–Ω–≤–æ–π—Å) –∏–ª–∏ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –û—Ç–∫—Ä–æ–π –æ–ø–ª–∞—Ç—É.", show_alert=True)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –ø—Ä—è–º–æ–π –æ–ø–ª–∞—Ç—ã —Å–ø–∏–Ω–∞
        sent = bot.send_message(chat_id, "–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Å–ø–∏–Ω (1 ‚≠êÔ∏è), –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∏–∂–µ.")
        pending_spin_invoice[user_id] = {"chat_id": sent.chat.id, "msg_id": sent.message_id, "type": "spin_pay"}
        amount = 100  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞/—Å–ø–∏–Ω–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã
        prices = [LabeledPrice(label="1 ‚≠êÔ∏è (–¥–ª—è —Å–ø–∏–Ω–∞)", amount=amount)]
        payload = "spin_pay"  # –ø–æ–º–µ—Ç–∫–∞, —á—Ç–æ —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–∞
        bot.send_invoice(chat_id, title="–û–ø–ª–∞—Ç–∞ —Å–ø–∏–Ω–∞ ‚Äî 1 ‚≠êÔ∏è", description="–û–ø–ª–∞—Ç–∏—Ç–µ 1 –∑–≤–µ–∑–¥—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —Å–¥–µ–ª–∞—Ç—å —Å–ø–∏–Ω",
                         payload=payload, provider_token="", currency="RUB", prices=prices)
        return

    # –µ—Å—Ç—å –∑–≤–µ–∑–¥—ã ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é/—Ä–µ–∑—É–ª—å—Ç–∞—Ç
    spin_locks.add(chat_id)
    bot.answer_callback_query(call.id)
    # —Å–ø–∏—Å–∞—Ç—å —Å—Ç–∞–≤–∫—É —Å—Ä–∞–∑—É
    bal -= bet
    set_balance(user_id, bal)
    threading.Thread(target=_run_spin_animation, args=(call.message.chat.id, call.message.message_id, user_id, bet)).start()

def _run_spin_animation(chat_id, msg_id, user_id, bet):
    try:
        # —Å–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫—Ä—É—á–µ–Ω–∏—è: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å–ª—É—á–∞–π–Ω–∞
        frames = [spin_once() for _ in range(5)]
        # –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã
        for frame in frames[:-1]:
            bot.edit_message_text(matrix_to_text(frame) + "\n\nüé∞ –ö—Ä—É—Ç–∏—Ç—Å—è...", chat_id, msg_id)
            time.sleep(0.6)
        # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä ‚Äî —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
        final = spin_once()
        result, mult = eval_middle_row(final)

        # –µ—Å–ª–∏ –≤—ã–∏–≥—Ä—ã—à ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑ (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞)
        if result != "lose":
            win = bet * mult
            add_balance(user_id, win)
        new_bal = get_balance(user_id)

        text = make_result_text(final, result, mult, new_bal)
        bot.edit_message_text(text, chat_id, msg_id, reply_markup=result_kb(), parse_mode="HTML")
    except Exception:
        try:
            # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É
            add_balance(user_id, bet)
            bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–ø–∏–Ω–∞. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", chat_id, msg_id)
        except:
            pass
    finally:
        spin_locks.discard(chat_id)

# ----- successful payment handler -----
@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    sp = message.successful_payment
    payload = sp.invoice_payload or ""
    user_id = message.from_user.id

    # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ (–ª–æ–∫–∞–ª—å–Ω–æ) ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
    try:
        # payload examples: "buy:1" or "spin_pay"
        if payload.startswith("buy:"):
            # –∑–∞—á–∏—Å–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
            try:
                amount_stars = int(payload.split(":", 1)[1])
            except:
                amount_stars = 1
            add_balance(user_id, amount_stars)
            # –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –±—ã–ª–æ
            pending = pending_spin_invoice.pop(user_id, None)
            if pending and pending.get("type") == "buy_star":
                try:
                    bot.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ù–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount_stars} ‚≠êÔ∏è\nüí∞ –ë–∞–ª–∞–Ω—Å: {get_balance(user_id)} ‚≠êÔ∏è",
                                          pending["chat_id"], pending["msg_id"])
                except:
                    pass
            bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ù–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount_stars} ‚≠êÔ∏è\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} ‚≠êÔ∏è")
            return

        if payload == "spin_pay":
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Å–ø–∏–Ω –Ω–∞–ø—Ä—è–º—É—é ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Å—Ç–∞–≤–∫–∞ —Å–ø–∏—Å–∞–Ω–∞
            pending = pending_spin_invoice.pop(user_id, None)
            # –Ω–∞–π–¥–µ–º chat_id/msg_id –∫—É–¥–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å (—Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–∏)
            if pending:
                chat_id = pending["chat_id"]
                msg_id = pending["msg_id"]
            else:
                # fallback ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                sent = bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞—é —Å–ø–∏–Ω...")
                chat_id = sent.chat.id
                msg_id = sent.message_id

            # spin: —Å—Ç–∞–≤–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞ –≤–Ω–µ—à–Ω–µ, –ø–æ—ç—Ç–æ–º—É –ù–ï —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å, –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            threading.Thread(target=_run_spin_animation_direct_payment, args=(chat_id, msg_id, user_id)).start()
            return

        # Other payloads: ignore or implement
        bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, —Å–ø–∞—Å–∏–±–æ.")
    except Exception:
        try:
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        except:
            pass

def _run_spin_animation_direct_payment(chat_id, msg_id, user_id):
    try:
        frames = [spin_once() for _ in range(5)]
        for frame in frames[:-1]:
            bot.edit_message_text(matrix_to_text(frame) + "\n\nüé∞ –ö—Ä—É—Ç–∏—Ç—Å—è...", chat_id, msg_id)
            time.sleep(0.6)
        final = spin_once()
        result, mult = eval_middle_row(final)

        # –≤—ã–∏–≥—Ä—ã—à: –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å (–æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –≤–Ω–µ—à–Ω–µ–π)
        if result != "lose":
            win = 1 * mult
            add_balance(user_id, win)

        new_bal = get_balance(user_id)
        text = make_result_text(final, result, mult, new_bal)
        bot.edit_message_text(text, chat_id, msg_id, reply_markup=result_kb(), parse_mode="HTML")
    except Exception:
        try:
            bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ø–∏–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", chat_id, msg_id)
        except:
            pass

if __name__ == "__main__":
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        pass
    except Exception as e:
        print("Polling stopped:", e)
