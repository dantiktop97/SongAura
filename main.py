import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ===================== –ö–û–ù–§–ò–ì =====================
TOKEN = os.getenv("Song")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_ID = 6525179440       # –¢–≤–æ–π Telegram ID (Danya)

# ===================== –¶–ò–¢–ê–¢–´ =====================
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ" —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
def generate_quote(n: int) -> str:
    return f"üí¨ –¶–∏—Ç–∞—Ç–∞ #{n} ‚Äî –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã {n}"

# ===================== –•–†–ê–ù–ï–ù–ò–ï =====================
used_quotes = set()
quote_counter = 1
unique_users = set()
last_users = []

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("üòÇ –Æ–º–æ—Ä", callback_data="humor")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def quote_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="random_quote")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

def admin_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")]
    ])

# ===================== –ü–†–ò–í–ï–¢–°–¢–í–ò–ï =====================
def full_greeting(user_name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuotesAura ‚Äî —Ç–≤–æ–π –±–æ—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏ —é–º–æ—Ä–æ–º!\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n"
        "- –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"
        "- –Æ–º–æ—Ä\n"
        "- –û –±–æ—Ç–µ\n\n"
        "üéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è!"
    )

# ===================== –§–£–ù–ö–¶–ò–ò =====================
def get_random_quote():
    global quote_counter
    quote = generate_quote(quote_counter)
    quote_counter += 1
    return quote

def add_user(user):
    global unique_users, last_users
    if user.id not in unique_users:
        unique_users.add(user.id)
        last_users.append(f"@{user.username}" if user.username else user.first_name)
        if len(last_users) > 10:  # —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            last_users.pop(0)

# ===================== –ö–û–ú–ê–ù–î–´ =====================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user)
    await update.message.reply_text(
        full_greeting(user.first_name or "–¥—Ä—É–≥"),
        reply_markup=main_menu()
    )

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    add_user(user)
    user_name = user.first_name or "–¥—Ä—É–≥"

    if query.data == "random_quote":
        quote = get_random_quote()
        await query.edit_message_text(text=quote, reply_markup=quote_menu())

    elif query.data == "humor":
        joke = "üòÇ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç–ª–∞—è ‚Äî –¥–ª—è —Å–ª–∞–±–∞–∫–æ–≤!"
        await query.edit_message_text(text=joke, reply_markup=back_menu())

    elif query.data == "about":
        text = (
            "‚ÑπÔ∏è *–û QuotesAuraBot*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ —é–º–æ—Ä.\n"
            "üí° –¶–∏—Ç–∞—Ç—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Å—Ä–∞–∑—É.\n"
            "üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
        )
        await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=back_menu())

    elif query.data == "back":
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ —Ç–≤–æ–π ID
        if user.id == ADMIN_ID:
            keyboard = main_menu().inline_keyboard + [[InlineKeyboardButton("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin")]]
            await query.edit_message_text(full_greeting(user_name), reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text(full_greeting(user_name), reply_markup=main_menu())

    elif query.data == "admin":
        if user.id == ADMIN_ID:
            await query.edit_message_text("üõ† –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=back_menu())

    elif query.data == "stats":
        if user.id == ADMIN_ID:
            users_text = "\n".join(last_users[-10:]) if last_users else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            await query.edit_message_text(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_text}", reply_markup=admin_menu())
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.", reply_markup=back_menu())

# ===================== MAIN =====================
if __name__ == "__main__":
    PORT = int(os.environ.get("PORT", 10000))
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))

    WEBHOOK_URL = f"https://songaura.onrender.com/{TOKEN}"
    print("QuotesAuraBot –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL
    )
